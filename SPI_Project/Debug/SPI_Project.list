
SPI_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d0  080059d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080059d0  080059d0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d0  080059d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080059d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001134  20000078  08005a50  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ac  08005a50  000211ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7e2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb0  00000000  00000000  0002c88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212ed  00000000  00000000  0002f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9ee  00000000  00000000  00050cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3ee4  00000000  00000000  0005c6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd8  00000000  00000000  001205dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005784 	.word	0x08005784

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005784 	.word	0x08005784

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8000286:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  char uart_buf[500];
	  int uart_buf_len;


	  for(int i =0; i<Max_Size; i++)
 8000288:	2300      	movs	r3, #0
 800028a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800028e:	e00f      	b.n	80002b0 <main+0x30>
	  {
		  Tx[i]= i+10;
 8000290:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000294:	b2db      	uxtb	r3, r3
 8000296:	330a      	adds	r3, #10
 8000298:	b2d9      	uxtb	r1, r3
 800029a:	4aa3      	ldr	r2, [pc, #652]	; (8000528 <main+0x2a8>)
 800029c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80002a0:	4413      	add	r3, r2
 80002a2:	460a      	mov	r2, r1
 80002a4:	701a      	strb	r2, [r3, #0]
	  for(int i =0; i<Max_Size; i++)
 80002a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80002aa:	3301      	adds	r3, #1
 80002ac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80002b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80002b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002b8:	dbea      	blt.n	8000290 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 ff5d 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f959 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 fa23 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002c6:	f000 f9f1 	bl	80006ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80002ca:	f000 f9b1 	bl	8000630 <MX_SPI1_Init>
  EEPROM_SPI_INIT(&hspi1);
 80002ce:	4897      	ldr	r0, [pc, #604]	; (800052c <main+0x2ac>)
 80002d0:	f000 fad2 	bl	8000878 <EEPROM_SPI_INIT>
  /* USER CODE BEGIN 2 */

  // Say something
  uart_buf_len = sprintf(uart_buf, "SPI Test\r\n");
 80002d4:	463b      	mov	r3, r7
 80002d6:	4996      	ldr	r1, [pc, #600]	; (8000530 <main+0x2b0>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f004 f943 	bl	8004564 <siprintf>
 80002de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80002e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	4639      	mov	r1, r7
 80002ea:	2364      	movs	r3, #100	; 0x64
 80002ec:	4891      	ldr	r0, [pc, #580]	; (8000534 <main+0x2b4>)
 80002ee:	f003 fd1d 	bl	8003d2c <HAL_UART_Transmit>

  // Erase the entire memory
    Erase_memory();
 80002f2:	f000 fba3 	bl	8000a3c <Erase_memory>
    //print the  address of block memory to be erased
    uart_buf_len = sprintf(uart_buf,"Start address of erase is %x\r\n",Erase_Add);
 80002f6:	4b90      	ldr	r3, [pc, #576]	; (8000538 <main+0x2b8>)
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	461a      	mov	r2, r3
 80002fc:	463b      	mov	r3, r7
 80002fe:	498f      	ldr	r1, [pc, #572]	; (800053c <main+0x2bc>)
 8000300:	4618      	mov	r0, r3
 8000302:	f004 f92f 	bl	8004564 <siprintf>
 8000306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800030a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800030e:	b29a      	uxth	r2, r3
 8000310:	4639      	mov	r1, r7
 8000312:	2364      	movs	r3, #100	; 0x64
 8000314:	4887      	ldr	r0, [pc, #540]	; (8000534 <main+0x2b4>)
 8000316:	f003 fd09 	bl	8003d2c <HAL_UART_Transmit>

    //Print the value of status register after erasing
    uint8_t Erase_state=Erase_memory();
 800031a:	f000 fb8f 	bl	8000a3c <Erase_memory>
 800031e:	4603      	mov	r3, r0
 8000320:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
  uart_buf_len = sprintf(uart_buf,"Statusbyte after erase operation is %x\r\n",Erase_state);
 8000324:	f897 21f7 	ldrb.w	r2, [r7, #503]	; 0x1f7
 8000328:	463b      	mov	r3, r7
 800032a:	4985      	ldr	r1, [pc, #532]	; (8000540 <main+0x2c0>)
 800032c:	4618      	mov	r0, r3
 800032e:	f004 f919 	bl	8004564 <siprintf>
 8000332:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800033a:	b29a      	uxth	r2, r3
 800033c:	4639      	mov	r1, r7
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	487c      	ldr	r0, [pc, #496]	; (8000534 <main+0x2b4>)
 8000342:	f003 fcf3 	bl	8003d2c <HAL_UART_Transmit>

    //Check if the memory has been erased or not
  EEread_arry(Erase_Add, &Rx[Erase_Add], 5);
 8000346:	4b7c      	ldr	r3, [pc, #496]	; (8000538 <main+0x2b8>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	4a7b      	ldr	r2, [pc, #492]	; (8000538 <main+0x2b8>)
 800034c:	8812      	ldrh	r2, [r2, #0]
 800034e:	4611      	mov	r1, r2
 8000350:	4a7c      	ldr	r2, [pc, #496]	; (8000544 <main+0x2c4>)
 8000352:	4411      	add	r1, r2
 8000354:	2205      	movs	r2, #5
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fb24 	bl	80009a4 <EEread_arry>

    //print the recieved buffer after erasing
  uart_buf_len = sprintf(uart_buf,"checking buffer after erase is %x %x %x %x %x \r\n",Rx[Erase_Add+0],Rx[Erase_Add+1],Rx[Erase_Add+2],Rx[Erase_Add+3],Rx[Erase_Add+4]);
 800035c:	4b76      	ldr	r3, [pc, #472]	; (8000538 <main+0x2b8>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	4b78      	ldr	r3, [pc, #480]	; (8000544 <main+0x2c4>)
 8000364:	5c9b      	ldrb	r3, [r3, r2]
 8000366:	461d      	mov	r5, r3
 8000368:	4b73      	ldr	r3, [pc, #460]	; (8000538 <main+0x2b8>)
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	3301      	adds	r3, #1
 800036e:	4a75      	ldr	r2, [pc, #468]	; (8000544 <main+0x2c4>)
 8000370:	5cd3      	ldrb	r3, [r2, r3]
 8000372:	461e      	mov	r6, r3
 8000374:	4b70      	ldr	r3, [pc, #448]	; (8000538 <main+0x2b8>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	3302      	adds	r3, #2
 800037a:	4a72      	ldr	r2, [pc, #456]	; (8000544 <main+0x2c4>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	4619      	mov	r1, r3
 8000380:	4b6d      	ldr	r3, [pc, #436]	; (8000538 <main+0x2b8>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	3303      	adds	r3, #3
 8000386:	4a6f      	ldr	r2, [pc, #444]	; (8000544 <main+0x2c4>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	461c      	mov	r4, r3
 800038c:	4b6a      	ldr	r3, [pc, #424]	; (8000538 <main+0x2b8>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	3304      	adds	r3, #4
 8000392:	4a6c      	ldr	r2, [pc, #432]	; (8000544 <main+0x2c4>)
 8000394:	5cd3      	ldrb	r3, [r2, r3]
 8000396:	4638      	mov	r0, r7
 8000398:	9302      	str	r3, [sp, #8]
 800039a:	9401      	str	r4, [sp, #4]
 800039c:	9100      	str	r1, [sp, #0]
 800039e:	4633      	mov	r3, r6
 80003a0:	462a      	mov	r2, r5
 80003a2:	4969      	ldr	r1, [pc, #420]	; (8000548 <main+0x2c8>)
 80003a4:	f004 f8de 	bl	8004564 <siprintf>
 80003a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80003ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	4639      	mov	r1, r7
 80003b4:	2364      	movs	r3, #100	; 0x64
 80003b6:	485f      	ldr	r0, [pc, #380]	; (8000534 <main+0x2b4>)
 80003b8:	f003 fcb8 	bl	8003d2c <HAL_UART_Transmit>

    //write block of memory
  EEPROM_SPI_WriteBuffer(Start_Add,&Tx[Start_Add],1500);
 80003bc:	4b63      	ldr	r3, [pc, #396]	; (800054c <main+0x2cc>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	4a62      	ldr	r2, [pc, #392]	; (800054c <main+0x2cc>)
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a58      	ldr	r2, [pc, #352]	; (8000528 <main+0x2a8>)
 80003c8:	4411      	add	r1, r2
 80003ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fc7c 	bl	8000ccc <EEPROM_SPI_WriteBuffer>

    //print the  address of block memory to be written
  uart_buf_len = sprintf(uart_buf,"Start address of buffer is %x\r\n", Start_Add);
 80003d4:	4b5d      	ldr	r3, [pc, #372]	; (800054c <main+0x2cc>)
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	463b      	mov	r3, r7
 80003dc:	495c      	ldr	r1, [pc, #368]	; (8000550 <main+0x2d0>)
 80003de:	4618      	mov	r0, r3
 80003e0:	f004 f8c0 	bl	8004564 <siprintf>
 80003e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80003e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	4639      	mov	r1, r7
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	4850      	ldr	r0, [pc, #320]	; (8000534 <main+0x2b4>)
 80003f4:	f003 fc9a 	bl	8003d2c <HAL_UART_Transmit>

    //print the value of status register after write operation
  uint8_t Wr_State=EEPROM_SPI_WriteBuffer(Start_Add,&Tx[Start_Add],1500);
 80003f8:	4b54      	ldr	r3, [pc, #336]	; (800054c <main+0x2cc>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	4a53      	ldr	r2, [pc, #332]	; (800054c <main+0x2cc>)
 80003fe:	8812      	ldrh	r2, [r2, #0]
 8000400:	4611      	mov	r1, r2
 8000402:	4a49      	ldr	r2, [pc, #292]	; (8000528 <main+0x2a8>)
 8000404:	4411      	add	r1, r2
 8000406:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fc5e 	bl	8000ccc <EEPROM_SPI_WriteBuffer>
 8000410:	4603      	mov	r3, r0
 8000412:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
  uart_buf_len = sprintf(uart_buf,"Statusbyte after write operation is %x\r\n",Wr_State);
 8000416:	f897 21f6 	ldrb.w	r2, [r7, #502]	; 0x1f6
 800041a:	463b      	mov	r3, r7
 800041c:	494d      	ldr	r1, [pc, #308]	; (8000554 <main+0x2d4>)
 800041e:	4618      	mov	r0, r3
 8000420:	f004 f8a0 	bl	8004564 <siprintf>
 8000424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800042c:	b29a      	uxth	r2, r3
 800042e:	4639      	mov	r1, r7
 8000430:	2364      	movs	r3, #100	; 0x64
 8000432:	4840      	ldr	r0, [pc, #256]	; (8000534 <main+0x2b4>)
 8000434:	f003 fc7a 	bl	8003d2c <HAL_UART_Transmit>

    //read the block of memory that has been written
  EEread_arry(Start_Add,&Rx[Start_Add],1500);
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <main+0x2cc>)
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	4a43      	ldr	r2, [pc, #268]	; (800054c <main+0x2cc>)
 800043e:	8812      	ldrh	r2, [r2, #0]
 8000440:	4611      	mov	r1, r2
 8000442:	4a40      	ldr	r2, [pc, #256]	; (8000544 <main+0x2c4>)
 8000444:	4411      	add	r1, r2
 8000446:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800044a:	4618      	mov	r0, r3
 800044c:	f000 faaa 	bl	80009a4 <EEread_arry>

   //print the value of status register after read operation
  uint8_t Re_State= EEread_arry(Start_Add,&Rx[Start_Add],1500);
 8000450:	4b3e      	ldr	r3, [pc, #248]	; (800054c <main+0x2cc>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	4a3d      	ldr	r2, [pc, #244]	; (800054c <main+0x2cc>)
 8000456:	8812      	ldrh	r2, [r2, #0]
 8000458:	4611      	mov	r1, r2
 800045a:	4a3a      	ldr	r2, [pc, #232]	; (8000544 <main+0x2c4>)
 800045c:	4411      	add	r1, r2
 800045e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fa9e 	bl	80009a4 <EEread_arry>
 8000468:	4603      	mov	r3, r0
 800046a:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
  uart_buf_len = sprintf(uart_buf,"Statusbyte after read operation is %x\r\n",Re_State);
 800046e:	f897 21f5 	ldrb.w	r2, [r7, #501]	; 0x1f5
 8000472:	463b      	mov	r3, r7
 8000474:	4938      	ldr	r1, [pc, #224]	; (8000558 <main+0x2d8>)
 8000476:	4618      	mov	r0, r3
 8000478:	f004 f874 	bl	8004564 <siprintf>
 800047c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000484:	b29a      	uxth	r2, r3
 8000486:	4639      	mov	r1, r7
 8000488:	2364      	movs	r3, #100	; 0x64
 800048a:	482a      	ldr	r0, [pc, #168]	; (8000534 <main+0x2b4>)
 800048c:	f003 fc4e 	bl	8003d2c <HAL_UART_Transmit>

   //print the recieved databuffer
  uart_buf_len = sprintf(uart_buf,"the received buffer is %d %d %d %d %d \r\n",Rx[1110],Rx[1112],Rx[1113],Rx[1114],Rx[1115]);
 8000490:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <main+0x2c4>)
 8000492:	f893 3456 	ldrb.w	r3, [r3, #1110]	; 0x456
 8000496:	461c      	mov	r4, r3
 8000498:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <main+0x2c4>)
 800049a:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 800049e:	461d      	mov	r5, r3
 80004a0:	4b28      	ldr	r3, [pc, #160]	; (8000544 <main+0x2c4>)
 80004a2:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b26      	ldr	r3, [pc, #152]	; (8000544 <main+0x2c4>)
 80004aa:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 80004ae:	4619      	mov	r1, r3
 80004b0:	4b24      	ldr	r3, [pc, #144]	; (8000544 <main+0x2c4>)
 80004b2:	f893 345b 	ldrb.w	r3, [r3, #1115]	; 0x45b
 80004b6:	4638      	mov	r0, r7
 80004b8:	9302      	str	r3, [sp, #8]
 80004ba:	9101      	str	r1, [sp, #4]
 80004bc:	9200      	str	r2, [sp, #0]
 80004be:	462b      	mov	r3, r5
 80004c0:	4622      	mov	r2, r4
 80004c2:	4926      	ldr	r1, [pc, #152]	; (800055c <main+0x2dc>)
 80004c4:	f004 f84e 	bl	8004564 <siprintf>
 80004c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80004cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	4639      	mov	r1, r7
 80004d4:	2364      	movs	r3, #100	; 0x64
 80004d6:	4817      	ldr	r0, [pc, #92]	; (8000534 <main+0x2b4>)
 80004d8:	f003 fc28 	bl	8003d2c <HAL_UART_Transmit>

  //print the exact address to be written
   uart_buf_len = sprintf(uart_buf,"the Byte_Address is %x\r\n",Byte_Address);
 80004dc:	4b20      	ldr	r3, [pc, #128]	; (8000560 <main+0x2e0>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	463b      	mov	r3, r7
 80004e4:	491f      	ldr	r1, [pc, #124]	; (8000564 <main+0x2e4>)
 80004e6:	4618      	mov	r0, r3
 80004e8:	f004 f83c 	bl	8004564 <siprintf>
 80004ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
   HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80004f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80004f4:	b29a      	uxth	r2, r3
 80004f6:	4639      	mov	r1, r7
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	480e      	ldr	r0, [pc, #56]	; (8000534 <main+0x2b4>)
 80004fc:	f003 fc16 	bl	8003d2c <HAL_UART_Transmit>

    // Write a byte in a exact address
   EEwrite_byte(Byte_Address,&Byte_Data);
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0x2e0>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	4918      	ldr	r1, [pc, #96]	; (8000568 <main+0x2e8>)
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f9c6 	bl	8000898 <EEwrite_byte>

    // Read the byte from an exact address
   EEread_byte(Byte_Address,&Recieved_byte);
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <main+0x2e0>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	4916      	ldr	r1, [pc, #88]	; (800056c <main+0x2ec>)
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fa02 	bl	800091c <EEread_byte>

    //Recieved_byte=EEPROM_SendByte(Byte_Data);
   printf("the Recieved_byte is %d\r\n",Recieved_byte);
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <main+0x2ec>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <main+0x2f0>)
 8000520:	f004 f808 	bl	8004534 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x2a4>
 8000526:	bf00      	nop
 8000528:	20000990 	.word	0x20000990
 800052c:	200008a8 	.word	0x200008a8
 8000530:	0800579c 	.word	0x0800579c
 8000534:	2000090c 	.word	0x2000090c
 8000538:	20000094 	.word	0x20000094
 800053c:	080057a8 	.word	0x080057a8
 8000540:	080057c8 	.word	0x080057c8
 8000544:	200000a8 	.word	0x200000a8
 8000548:	080057f4 	.word	0x080057f4
 800054c:	20000000 	.word	0x20000000
 8000550:	08005828 	.word	0x08005828
 8000554:	08005848 	.word	0x08005848
 8000558:	08005874 	.word	0x08005874
 800055c:	0800589c 	.word	0x0800589c
 8000560:	20000002 	.word	0x20000002
 8000564:	080058c8 	.word	0x080058c8
 8000568:	20000004 	.word	0x20000004
 800056c:	200000a4 	.word	0x200000a4
 8000570:	080058e4 	.word	0x080058e4

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0a6      	sub	sp, #152	; 0x98
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800057e:	2228      	movs	r2, #40	; 0x28
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 ffce 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2258      	movs	r2, #88	; 0x58
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 ffc0 	bl	8004524 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f8e2 	bl	800179c <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005de:	f000 f945 	bl	800086c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 ffe2 	bl	80025c8 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060a:	f000 f92f 	bl	800086c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800060e:	2302      	movs	r3, #2
 8000610:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fa0b 	bl	8002a34 <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000624:	f000 f922 	bl	800086c <Error_Handler>
  }

}
 8000628:	bf00      	nop
 800062a:	3798      	adds	r7, #152	; 0x98
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_SPI1_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_SPI1_Init+0x74>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_SPI1_Init+0x74>)
 800064a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800064e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_SPI1_Init+0x74>)
 800065e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000662:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000666:	2210      	movs	r2, #16
 8000668:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_SPI1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_SPI1_Init+0x74>)
 800067e:	2207      	movs	r2, #7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_SPI1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_SPI1_Init+0x74>)
 8000690:	f002 fbee 	bl	8002e70 <HAL_SPI_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 f8e7 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200008a8 	.word	0x200008a8
 80006a8:	40013000 	.word	0x40013000

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART2_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006f0:	f003 face 	bl	8003c90 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f8b7 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000090c 	.word	0x2000090c
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @retval None
  */


static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a34      	ldr	r2, [pc, #208]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_GPIO_Init+0xec>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a2e      	ldr	r2, [pc, #184]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xec>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_GPIO_Init+0xec>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 ffee 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4819      	ldr	r0, [pc, #100]	; (80007fc <MX_GPIO_Init+0xf0>)
 8000796:	f000 ffe9 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_GPIO_Init+0xf4>)
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4815      	ldr	r0, [pc, #84]	; (8000804 <MX_GPIO_Init+0xf8>)
 80007b0:	f000 fe52 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f000 fe42 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0xf0>)
 80007ec:	f000 fe34 	bl	8001458 <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400
 8000800:	10210000 	.word	0x10210000
 8000804:	48000800 	.word	0x48000800

08000808 <__io_putchar>:
/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8000816:	f107 010c 	add.w	r1, r7, #12
 800081a:	230a      	movs	r3, #10
 800081c:	2201      	movs	r2, #1
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <__io_putchar+0x28>)
 8000820:	f003 fa84 	bl	8003d2c <HAL_UART_Transmit>
 return ch;
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000090c 	.word	0x2000090c

08000834 <_write>:

int _write(int file,char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e009      	b.n	800085a <_write+0x26>
 {
 __io_putchar(*ptr++);
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	60ba      	str	r2, [r7, #8]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffda 	bl	8000808 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3301      	adds	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbf1      	blt.n	8000846 <_write+0x12>
 }
return len;
 8000862:	687b      	ldr	r3, [r7, #4]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <EEPROM_SPI_INIT>:
uint8_t EEPROM_StatusByte;



void EEPROM_SPI_INIT(SPI_HandleTypeDef * hspi)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    EEPROM_SPI = hspi;
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <EEPROM_SPI_INIT+0x1c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20001190 	.word	0x20001190

08000898 <EEwrite_byte>:
}



void EEwrite_byte(uint16_t StartAddress, uint8_t* data)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	80fb      	strh	r3, [r7, #6]
	  while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 80008a4:	e002      	b.n	80008ac <EEwrite_byte+0x14>
		{
		        HAL_Delay(5);
 80008a6:	2005      	movs	r0, #5
 80008a8:	f000 fccc 	bl	8001244 <HAL_Delay>
	  while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <EEwrite_byte+0x7c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d1f5      	bne.n	80008a6 <EEwrite_byte+0xe>
		}

		Write_Enable();
 80008ba:	f000 f91f 	bl	8000afc <Write_Enable>
		uint8_t command[3];
		command[0] = EEPROM_WRITE;// Send "Write to Memory" instruction
 80008be:	2302      	movs	r3, #2
 80008c0:	733b      	strb	r3, [r7, #12]
		command[1] = StartAddress>>8;
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	737b      	strb	r3, [r7, #13]
		command[2] = StartAddress;
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	73bb      	strb	r3, [r7, #14]
		//command[3] = data[size];
		EEPROM_CS_LOW();
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4810      	ldr	r0, [pc, #64]	; (8000918 <EEwrite_byte+0x80>)
 80008d8:	f000 ff48 	bl	800176c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,3,100);
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <EEwrite_byte+0x7c>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	f107 010c 	add.w	r1, r7, #12
 80008e4:	2364      	movs	r3, #100	; 0x64
 80008e6:	2203      	movs	r2, #3
 80008e8:	f002 fb6d 	bl	8002fc6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(EEPROM_SPI,(uint8_t*) data, 1, 100);
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <EEwrite_byte+0x7c>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	2201      	movs	r2, #1
 80008f4:	6839      	ldr	r1, [r7, #0]
 80008f6:	f002 fb66 	bl	8002fc6 <HAL_SPI_Transmit>
	    EEPROM_CS_HIGH();
 80008fa:	2201      	movs	r2, #1
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <EEwrite_byte+0x80>)
 8000900:	f000 ff34 	bl	800176c <HAL_GPIO_WritePin>
		EEPROM_SPI_WaitStandbyState();
 8000904:	f000 f95e 	bl	8000bc4 <EEPROM_SPI_WaitStandbyState>
		Write_Disable();
 8000908:	f000 f916 	bl	8000b38 <Write_Disable>


}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20001190 	.word	0x20001190
 8000918:	48000400 	.word	0x48000400

0800091c <EEread_byte>:

void EEread_byte(uint16_t StartAddress,uint8_t* data)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	80fb      	strh	r3, [r7, #6]
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 8000928:	e002      	b.n	8000930 <EEread_byte+0x14>
		    {
			HAL_Delay(5);
 800092a:	2005      	movs	r0, #5
 800092c:	f000 fc8a 	bl	8001244 <HAL_Delay>
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <EEread_byte+0x80>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b01      	cmp	r3, #1
 800093c:	d1f5      	bne.n	800092a <EEread_byte+0xe>
		    }
		     uint8_t command[3];
		     command[0] = EEPROM_READ;    // Send "Read from Memory" instruction
 800093e:	2303      	movs	r3, #3
 8000940:	733b      	strb	r3, [r7, #12]
		     command[1] = StartAddress >> 8;  // Send 16-bit address
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	737b      	strb	r3, [r7, #13]
		     command[2] = StartAddress;
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	73bb      	strb	r3, [r7, #14]
		    EEPROM_CS_LOW();// Select the EEPROM: Chip Select low
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	4812      	ldr	r0, [pc, #72]	; (80009a0 <EEread_byte+0x84>)
 8000958:	f000 ff08 	bl	800176c <HAL_GPIO_WritePin>
		    HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,3, 100);
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <EEread_byte+0x80>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	f107 010c 	add.w	r1, r7, #12
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	2203      	movs	r2, #3
 8000968:	f002 fb2d 	bl	8002fc6 <HAL_SPI_Transmit>
   while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)data, 1 , 100) == HAL_BUSY)
 800096c:	e002      	b.n	8000974 <EEread_byte+0x58>
		      {
		    	      HAL_Delay(5);
 800096e:	2005      	movs	r0, #5
 8000970:	f000 fc68 	bl	8001244 <HAL_Delay>
   while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)data, 1 , 100) == HAL_BUSY)
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <EEread_byte+0x80>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	2201      	movs	r2, #1
 800097c:	6839      	ldr	r1, [r7, #0]
 800097e:	f002 fc90 	bl	80032a2 <HAL_SPI_Receive>
 8000982:	4603      	mov	r3, r0
 8000984:	2b02      	cmp	r3, #2
 8000986:	d0f2      	beq.n	800096e <EEread_byte+0x52>
		       };
		    // Deselect the EEPROM: Chip Select high
		    EEPROM_CS_HIGH();
 8000988:	2201      	movs	r2, #1
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <EEread_byte+0x84>)
 800098e:	f000 feed 	bl	800176c <HAL_GPIO_WritePin>

}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20001190 	.word	0x20001190
 80009a0:	48000400 	.word	0x48000400

080009a4 <EEread_arry>:

uint8_t EEread_arry(uint16_t StartAddress,uint8_t* data, uint16_t size)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	80fb      	strh	r3, [r7, #6]
 80009b0:	4613      	mov	r3, r2
 80009b2:	80bb      	strh	r3, [r7, #4]
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 80009b4:	e002      	b.n	80009bc <EEread_arry+0x18>
		    {
			HAL_Delay(5);
 80009b6:	2005      	movs	r0, #5
 80009b8:	f000 fc44 	bl	8001244 <HAL_Delay>
	while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <EEread_arry+0x90>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d1f5      	bne.n	80009b6 <EEread_arry+0x12>
		    }
		     uint8_t command[3];

		     command[0] = EEPROM_READ;    // Send "Read from Memory" instruction
 80009ca:	2303      	movs	r3, #3
 80009cc:	733b      	strb	r3, [r7, #12]
		     command[1] = StartAddress >> 8;  // Send 16-bit address
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	737b      	strb	r3, [r7, #13]
		     command[2] = StartAddress;
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	73bb      	strb	r3, [r7, #14]
		    EEPROM_CS_LOW();// Select the EEPROM: Chip Select low
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <EEread_arry+0x94>)
 80009e4:	f000 fec2 	bl	800176c <HAL_GPIO_WritePin>
		    HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,3, 100);
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <EEread_arry+0x90>)
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	f107 010c 	add.w	r1, r7, #12
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2203      	movs	r2, #3
 80009f4:	f002 fae7 	bl	8002fc6 <HAL_SPI_Transmit>
   while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)data, size , 100) == HAL_BUSY)
 80009f8:	e002      	b.n	8000a00 <EEread_arry+0x5c>
		      {
		    	      HAL_Delay(5);
 80009fa:	2005      	movs	r0, #5
 80009fc:	f000 fc22 	bl	8001244 <HAL_Delay>
   while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)data, size , 100) == HAL_BUSY)
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <EEread_arry+0x90>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	88ba      	ldrh	r2, [r7, #4]
 8000a06:	2364      	movs	r3, #100	; 0x64
 8000a08:	6839      	ldr	r1, [r7, #0]
 8000a0a:	f002 fc4a 	bl	80032a2 <HAL_SPI_Receive>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d0f2      	beq.n	80009fa <EEread_arry+0x56>
		       };
		    // Deselect the EEPROM: Chip Select high
		    EEPROM_CS_HIGH();
 8000a14:	2201      	movs	r2, #1
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <EEread_arry+0x94>)
 8000a1a:	f000 fea7 	bl	800176c <HAL_GPIO_WritePin>
		    Read_Status_Register();
 8000a1e:	f000 f8a9 	bl	8000b74 <Read_Status_Register>
		    uint8_t Status_read_byte=Read_Status_Register();
 8000a22:	f000 f8a7 	bl	8000b74 <Read_Status_Register>
 8000a26:	4603      	mov	r3, r0
 8000a28:	73fb      	strb	r3, [r7, #15]
		    return Status_read_byte;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20001190 	.word	0x20001190
 8000a38:	48000400 	.word	0x48000400

08000a3c <Erase_memory>:

uint8_t Erase_memory()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8000a42:	af00      	add	r7, sp, #0
          uint8_t Er[2048];
          for(int i=0;i<2048;i++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8000a4a:	e00b      	b.n	8000a64 <Erase_memory+0x28>
          {
        	  Er[i]=0xff;
 8000a4c:	f107 0208 	add.w	r2, r7, #8
 8000a50:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000a54:	4413      	add	r3, r2
 8000a56:	22ff      	movs	r2, #255	; 0xff
 8000a58:	701a      	strb	r2, [r3, #0]
          for(int i=0;i<2048;i++)
 8000a5a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8000a64:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a6c:	dbee      	blt.n	8000a4c <Erase_memory+0x10>
          }

          while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 8000a6e:	e002      	b.n	8000a76 <Erase_memory+0x3a>
         		{
         		        HAL_Delay(5);
 8000a70:	2005      	movs	r0, #5
 8000a72:	f000 fbe7 	bl	8001244 <HAL_Delay>
          while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <Erase_memory+0xb8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d1f5      	bne.n	8000a70 <Erase_memory+0x34>
         		}

         		Write_Enable();
 8000a84:	f000 f83a 	bl	8000afc <Write_Enable>
         		uint8_t command[3];
         		command[0] = EEPROM_WRITE;// Send "Write to Memory" instruction
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	701a      	strb	r2, [r3, #0]
         		command[1] = 0x00>>8;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	705a      	strb	r2, [r3, #1]
         		command[2] = 0x00;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	709a      	strb	r2, [r3, #2]
         		//command[3] = data[size];
         		EEPROM_CS_LOW();
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4816      	ldr	r0, [pc, #88]	; (8000af8 <Erase_memory+0xbc>)
 8000aa0:	f000 fe64 	bl	800176c <HAL_GPIO_WritePin>
         		HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,3,100);
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <Erase_memory+0xb8>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	2364      	movs	r3, #100	; 0x64
 8000aac:	2203      	movs	r2, #3
 8000aae:	f002 fa8a 	bl	8002fc6 <HAL_SPI_Transmit>
         		HAL_SPI_Transmit(EEPROM_SPI,(uint8_t*) Er,2048, 100);
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <Erase_memory+0xb8>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	f107 0108 	add.w	r1, r7, #8
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac0:	f002 fa81 	bl	8002fc6 <HAL_SPI_Transmit>
         	    EEPROM_CS_HIGH();
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <Erase_memory+0xbc>)
 8000aca:	f000 fe4f 	bl	800176c <HAL_GPIO_WritePin>
         		EEPROM_SPI_WaitStandbyState();
 8000ace:	f000 f879 	bl	8000bc4 <EEPROM_SPI_WaitStandbyState>
         		Write_Disable();
 8000ad2:	f000 f831 	bl	8000b38 <Write_Disable>
          Read_Status_Register();
 8000ad6:	f000 f84d 	bl	8000b74 <Read_Status_Register>
          uint8_t Erase_status_byte=Read_Status_Register();
 8000ada:	f000 f84b 	bl	8000b74 <Read_Status_Register>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 380b 	strb.w	r3, [r7, #2059]	; 0x80b
          return Erase_status_byte;
 8000ae4:	f897 380b 	ldrb.w	r3, [r7, #2059]	; 0x80b
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20001190 	.word	0x20001190
 8000af8:	48000400 	.word	0x48000400

08000afc <Write_Enable>:

void Write_Enable()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	EEPROM_CS_LOW();                                                          //   Select the EEPROM: Chip Select low
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	480a      	ldr	r0, [pc, #40]	; (8000b30 <Write_Enable+0x34>)
 8000b08:	f000 fe30 	bl	800176c <HAL_GPIO_WritePin>
	uint8_t command[1] = { EEPROM_WREN };                                     //  "Write Enable" instruction
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,1, 100);                   //  Transmit the instruction
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <Write_Enable+0x38>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	1d39      	adds	r1, r7, #4
 8000b16:	2364      	movs	r3, #100	; 0x64
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f002 fa54 	bl	8002fc6 <HAL_SPI_Transmit>
	EEPROM_CS_HIGH();                                                         //  Deselect the EEPROM: Chip Select high
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <Write_Enable+0x34>)
 8000b24:	f000 fe22 	bl	800176c <HAL_GPIO_WritePin>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	48000400 	.word	0x48000400
 8000b34:	20001190 	.word	0x20001190

08000b38 <Write_Disable>:
void Write_Disable()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	EEPROM_CS_LOW();                                                            // Select the EEPROM: Chip Select low
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <Write_Disable+0x34>)
 8000b44:	f000 fe12 	bl	800176c <HAL_GPIO_WritePin>
	uint8_t command[1] = { EEPROM_WRDI };                                       //  "Write Disable" instruction
 8000b48:	2304      	movs	r3, #4
 8000b4a:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,1, 100);                     // Transmit the instruction
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <Write_Disable+0x38>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	1d39      	adds	r1, r7, #4
 8000b52:	2364      	movs	r3, #100	; 0x64
 8000b54:	2201      	movs	r2, #1
 8000b56:	f002 fa36 	bl	8002fc6 <HAL_SPI_Transmit>
	EEPROM_CS_HIGH();                                                           // Deselect the EEPROM: Chip Select high
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <Write_Disable+0x34>)
 8000b60:	f000 fe04 	bl	800176c <HAL_GPIO_WritePin>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	20001190 	.word	0x20001190

08000b74 <Read_Status_Register>:

uint8_t Read_Status_Register()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
	    uint8_t status;
	    EEPROM_CS_LOW();                                                        // Select the EEPROM: Chip Select low
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <Read_Status_Register+0x48>)
 8000b80:	f000 fdf4 	bl	800176c <HAL_GPIO_WritePin>
		uint8_t command[1] = { EEPROM_RDSR };                                   //  "Read Status Register" instruction
 8000b84:	2305      	movs	r3, #5
 8000b86:	713b      	strb	r3, [r7, #4]
		uint8_t spi_buf[1];
		HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,1, 100);                 // Transmit the instruction
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <Read_Status_Register+0x4c>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	1d39      	adds	r1, r7, #4
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2201      	movs	r2, #1
 8000b92:	f002 fa18 	bl	8002fc6 <HAL_SPI_Transmit>
		HAL_SPI_Receive(EEPROM_SPI,(uint8_t*)spi_buf,1, 100);                   // Recieve  the value of status register
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <Read_Status_Register+0x4c>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	4639      	mov	r1, r7
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f002 fb7f 	bl	80032a2 <HAL_SPI_Receive>
		status= spi_buf[0];
 8000ba4:	783b      	ldrb	r3, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
		EEPROM_CS_HIGH();                                                       // Deselect the EEPROM: Chip Select high
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <Read_Status_Register+0x48>)
 8000bae:	f000 fddd 	bl	800176c <HAL_GPIO_WritePin>
		return status;                                                          // return the value
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	20001190 	.word	0x20001190

08000bc4 <EEPROM_SPI_WaitStandbyState>:

uint8_t EEPROM_SPI_WaitStandbyState(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
    uint8_t sEEstatus[1] = { 0x00 };
 8000bca:	2300      	movs	r3, #0
 8000bcc:	713b      	strb	r3, [r7, #4]
    uint8_t command[1] = { EEPROM_RDSR };
 8000bce:	2305      	movs	r3, #5
 8000bd0:	703b      	strb	r3, [r7, #0]

    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2140      	movs	r1, #64	; 0x40
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <EEPROM_SPI_WaitStandbyState+0x68>)
 8000bd8:	f000 fdc8 	bl	800176c <HAL_GPIO_WritePin>

    // Send "Read Status Register" instruction
    HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,1, 100);
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <EEPROM_SPI_WaitStandbyState+0x6c>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	4639      	mov	r1, r7
 8000be2:	2364      	movs	r3, #100	; 0x64
 8000be4:	2201      	movs	r2, #1
 8000be6:	f002 f9ee 	bl	8002fc6 <HAL_SPI_Transmit>

    // Loop as long as the memory is busy with a write cycle
    do {

        while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 8000bea:	e002      	b.n	8000bf2 <EEPROM_SPI_WaitStandbyState+0x2e>
        	HAL_Delay(5);
 8000bec:	2005      	movs	r0, #5
 8000bee:	f000 fb29 	bl	8001244 <HAL_Delay>
        while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <EEPROM_SPI_WaitStandbyState+0x6c>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	1d39      	adds	r1, r7, #4
 8000bf8:	23c8      	movs	r3, #200	; 0xc8
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f002 fb51 	bl	80032a2 <HAL_SPI_Receive>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d0f2      	beq.n	8000bec <EEPROM_SPI_WaitStandbyState+0x28>
        };

        HAL_Delay(5);
 8000c06:	2005      	movs	r0, #5
 8000c08:	f000 fb1c 	bl	8001244 <HAL_Delay>

    } while ((sEEstatus[0] & EEPROM_WIP_FLAG) == SET); // Write in progress
 8000c0c:	793b      	ldrb	r3, [r7, #4]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1ed      	bne.n	8000bf2 <EEPROM_SPI_WaitStandbyState+0x2e>

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 8000c16:	2201      	movs	r2, #1
 8000c18:	2140      	movs	r1, #64	; 0x40
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <EEPROM_SPI_WaitStandbyState+0x68>)
 8000c1c:	f000 fda6 	bl	800176c <HAL_GPIO_WritePin>

    return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	20001190 	.word	0x20001190

08000c34 <EEwrite_arry>:
    Write_Disable();

}

uint8_t EEwrite_arry(uint16_t StartAddress, uint8_t* data, uint16_t size)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	80fb      	strh	r3, [r7, #6]
 8000c40:	4613      	mov	r3, r2
 8000c42:	80bb      	strh	r3, [r7, #4]
	  while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 8000c44:	e002      	b.n	8000c4c <EEwrite_arry+0x18>
		{
		        HAL_Delay(5);
 8000c46:	2005      	movs	r0, #5
 8000c48:	f000 fafc 	bl	8001244 <HAL_Delay>
	  while (EEPROM_SPI->State != HAL_SPI_STATE_READY)
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <EEwrite_arry+0x90>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d1f5      	bne.n	8000c46 <EEwrite_arry+0x12>
		}

		Write_Enable();
 8000c5a:	f7ff ff4f 	bl	8000afc <Write_Enable>
		uint8_t command[3];
		command[0] = EEPROM_WRITE;// Send "Write to Memory" instruction
 8000c5e:	2302      	movs	r3, #2
 8000c60:	733b      	strb	r3, [r7, #12]
		command[1] = StartAddress>>8;
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	737b      	strb	r3, [r7, #13]
		command[2] = StartAddress;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	73bb      	strb	r3, [r7, #14]
		//command[3] = data[size];
		EEPROM_CS_LOW();
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <EEwrite_arry+0x94>)
 8000c78:	f000 fd78 	bl	800176c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)command,3,100);
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <EEwrite_arry+0x90>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	f107 010c 	add.w	r1, r7, #12
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	2203      	movs	r2, #3
 8000c88:	f002 f99d 	bl	8002fc6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(EEPROM_SPI,(uint8_t*) data, size, 100);
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <EEwrite_arry+0x90>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	88ba      	ldrh	r2, [r7, #4]
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	6839      	ldr	r1, [r7, #0]
 8000c96:	f002 f996 	bl	8002fc6 <HAL_SPI_Transmit>
	    EEPROM_CS_HIGH();
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <EEwrite_arry+0x94>)
 8000ca0:	f000 fd64 	bl	800176c <HAL_GPIO_WritePin>
		EEPROM_SPI_WaitStandbyState();
 8000ca4:	f7ff ff8e 	bl	8000bc4 <EEPROM_SPI_WaitStandbyState>
		Write_Disable();
 8000ca8:	f7ff ff46 	bl	8000b38 <Write_Disable>
		Read_Status_Register();
 8000cac:	f7ff ff62 	bl	8000b74 <Read_Status_Register>
		uint8_t Status_write_byte=Read_Status_Register();
 8000cb0:	f7ff ff60 	bl	8000b74 <Read_Status_Register>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	73fb      	strb	r3, [r7, #15]
		return Status_write_byte;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]

}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20001190 	.word	0x20001190
 8000cc8:	48000400 	.word	0x48000400

08000ccc <EEPROM_SPI_WriteBuffer>:

uint8_t EEPROM_SPI_WriteBuffer( uint16_t WriteAddr,uint8_t* data, uint16_t NumByteToWrite)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	80fb      	strh	r3, [r7, #6]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	80bb      	strh	r3, [r7, #4]
	uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	82fb      	strh	r3, [r7, #22]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	82bb      	strh	r3, [r7, #20]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	827b      	strh	r3, [r7, #18]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	823b      	strh	r3, [r7, #16]
 8000cec:	2300      	movs	r3, #0
 8000cee:	81fb      	strh	r3, [r7, #14]
	uint16_t sEE_DataNum = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	81bb      	strh	r3, [r7, #12]
	Addr = WriteAddr % EEPROM_PAGESIZE;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f003 031f 	and.w	r3, r3, #31
 8000cfa:	827b      	strh	r3, [r7, #18]
	count = EEPROM_PAGESIZE - Addr;
 8000cfc:	8a7b      	ldrh	r3, [r7, #18]
 8000cfe:	f1c3 0320 	rsb	r3, r3, #32
 8000d02:	823b      	strh	r3, [r7, #16]
	NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	82fb      	strh	r3, [r7, #22]
    NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	82bb      	strh	r3, [r7, #20]
    if (Addr == 0)
 8000d12:	8a7b      	ldrh	r3, [r7, #18]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d127      	bne.n	8000d68 <EEPROM_SPI_WriteBuffer+0x9c>

    { /* WriteAddr is EEPROM_PAGESIZE aligned  */
        if (NumOfPage == 0)
 8000d18:	8afb      	ldrh	r3, [r7, #22]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d116      	bne.n	8000d4c <EEPROM_SPI_WriteBuffer+0x80>
               { /* NumByteToWrite < EEPROM_PAGESIZE */
                   sEE_DataNum = NumByteToWrite;
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	81bb      	strh	r3, [r7, #12]
                   EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000d22:	89ba      	ldrh	r2, [r7, #12]
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	6839      	ldr	r1, [r7, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff83 	bl	8000c34 <EEwrite_arry>
 8000d2e:	e082      	b.n	8000e36 <EEPROM_SPI_WriteBuffer+0x16a>
               }
     else
        {
    	 while (NumOfPage--)
    	   {
    		 sEE_DataNum = EEPROM_PAGESIZE;
 8000d30:	2320      	movs	r3, #32
 8000d32:	81bb      	strh	r3, [r7, #12]
    		 EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000d34:	89ba      	ldrh	r2, [r7, #12]
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	6839      	ldr	r1, [r7, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff7a 	bl	8000c34 <EEwrite_arry>
    		 WriteAddr +=  EEPROM_PAGESIZE;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	3320      	adds	r3, #32
 8000d44:	80fb      	strh	r3, [r7, #6]
    		 data += EEPROM_PAGESIZE;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	3320      	adds	r3, #32
 8000d4a:	603b      	str	r3, [r7, #0]
    	 while (NumOfPage--)
 8000d4c:	8afb      	ldrh	r3, [r7, #22]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	82fa      	strh	r2, [r7, #22]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1ec      	bne.n	8000d30 <EEPROM_SPI_WriteBuffer+0x64>

    	   }

    	 sEE_DataNum = NumOfSingle;
 8000d56:	8abb      	ldrh	r3, [r7, #20]
 8000d58:	81bb      	strh	r3, [r7, #12]
    	 EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000d5a:	89ba      	ldrh	r2, [r7, #12]
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	6839      	ldr	r1, [r7, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff67 	bl	8000c34 <EEwrite_arry>
 8000d66:	e066      	b.n	8000e36 <EEPROM_SPI_WriteBuffer+0x16a>
        }
     }
    else

    {  /* WriteAddr is not EEPROM_PAGESIZE aligned  */
        if (NumOfPage == 0)
 8000d68:	8afb      	ldrh	r3, [r7, #22]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d129      	bne.n	8000dc2 <EEPROM_SPI_WriteBuffer+0xf6>
           { /* NumByteToWrite < EEPROM_PAGESIZE */


               if (NumOfSingle > count)
 8000d6e:	8aba      	ldrh	r2, [r7, #20]
 8000d70:	8a3b      	ldrh	r3, [r7, #16]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d91c      	bls.n	8000db0 <EEPROM_SPI_WriteBuffer+0xe4>

               { /* (NumByteToWrite + WriteAddr) > EEPROM_PAGESIZE */
                temp = NumOfSingle - count;
 8000d76:	8aba      	ldrh	r2, [r7, #20]
 8000d78:	8a3b      	ldrh	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	81fb      	strh	r3, [r7, #14]
                sEE_DataNum = count;
 8000d7e:	8a3b      	ldrh	r3, [r7, #16]
 8000d80:	81bb      	strh	r3, [r7, #12]
                EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000d82:	89ba      	ldrh	r2, [r7, #12]
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	6839      	ldr	r1, [r7, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff53 	bl	8000c34 <EEwrite_arry>
                WriteAddr +=  count;
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	8a3b      	ldrh	r3, [r7, #16]
 8000d92:	4413      	add	r3, r2
 8000d94:	80fb      	strh	r3, [r7, #6]
                data += count;
 8000d96:	8a3b      	ldrh	r3, [r7, #16]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	603b      	str	r3, [r7, #0]
                sEE_DataNum = temp;
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	81bb      	strh	r3, [r7, #12]
                EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000da2:	89ba      	ldrh	r2, [r7, #12]
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	6839      	ldr	r1, [r7, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff43 	bl	8000c34 <EEwrite_arry>
 8000dae:	e042      	b.n	8000e36 <EEPROM_SPI_WriteBuffer+0x16a>
               }
                else
                {
                     sEE_DataNum = NumByteToWrite;
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	81bb      	strh	r3, [r7, #12]
                     EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000db4:	89ba      	ldrh	r2, [r7, #12]
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff3a 	bl	8000c34 <EEwrite_arry>
 8000dc0:	e039      	b.n	8000e36 <EEPROM_SPI_WriteBuffer+0x16a>
                 }
             }

        else
        {
             NumByteToWrite -= count;
 8000dc2:	88ba      	ldrh	r2, [r7, #4]
 8000dc4:	8a3b      	ldrh	r3, [r7, #16]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	80bb      	strh	r3, [r7, #4]
        	 NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	095b      	lsrs	r3, r3, #5
 8000dce:	82fb      	strh	r3, [r7, #22]
        	 NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	82bb      	strh	r3, [r7, #20]
        	 sEE_DataNum = count;
 8000dd8:	8a3b      	ldrh	r3, [r7, #16]
 8000dda:	81bb      	strh	r3, [r7, #12]
        	 EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000ddc:	89ba      	ldrh	r2, [r7, #12]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	6839      	ldr	r1, [r7, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff26 	bl	8000c34 <EEwrite_arry>
        	 WriteAddr +=  count;
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	8a3b      	ldrh	r3, [r7, #16]
 8000dec:	4413      	add	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
        	 data+= count;
 8000df0:	8a3b      	ldrh	r3, [r7, #16]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	603b      	str	r3, [r7, #0]
        	 while (NumOfPage--)
 8000df8:	e00d      	b.n	8000e16 <EEPROM_SPI_WriteBuffer+0x14a>
        	   {
        	        sEE_DataNum = EEPROM_PAGESIZE;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	81bb      	strh	r3, [r7, #12]
        	        EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000dfe:	89ba      	ldrh	r2, [r7, #12]
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff15 	bl	8000c34 <EEwrite_arry>
                    WriteAddr +=  EEPROM_PAGESIZE;
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	3320      	adds	r3, #32
 8000e0e:	80fb      	strh	r3, [r7, #6]
                    data += EEPROM_PAGESIZE;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	3320      	adds	r3, #32
 8000e14:	603b      	str	r3, [r7, #0]
        	 while (NumOfPage--)
 8000e16:	8afb      	ldrh	r3, [r7, #22]
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	82fa      	strh	r2, [r7, #22]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ec      	bne.n	8000dfa <EEPROM_SPI_WriteBuffer+0x12e>
        	    }

        	 if (NumOfSingle != 0)
 8000e20:	8abb      	ldrh	r3, [r7, #20]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <EEPROM_SPI_WriteBuffer+0x16a>
        	     {
        	         sEE_DataNum = NumOfSingle;
 8000e26:	8abb      	ldrh	r3, [r7, #20]
 8000e28:	81bb      	strh	r3, [r7, #12]
        	         EEwrite_arry(WriteAddr, data , sEE_DataNum);
 8000e2a:	89ba      	ldrh	r2, [r7, #12]
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff feff 	bl	8000c34 <EEwrite_arry>



    }

	Read_Status_Register();
 8000e36:	f7ff fe9d 	bl	8000b74 <Read_Status_Register>
	uint8_t Status_write_byte=Read_Status_Register();
 8000e3a:	f7ff fe9b 	bl	8000b74 <Read_Status_Register>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	72fb      	strb	r3, [r7, #11]
	return Status_write_byte;
 8000e42:	7afb      	ldrb	r3, [r7, #11]


}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x44>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x44>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x44>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x44>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x44>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x44>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e82:	2007      	movs	r0, #7
 8000e84:	f000 fab4 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_SPI_MspInit+0x7c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d128      	bne.n	8000f08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_SPI_MspInit+0x80>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <HAL_SPI_MspInit+0x80>)
 8000ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_SPI_MspInit+0x80>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_SPI_MspInit+0x80>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_SPI_MspInit+0x80>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_SPI_MspInit+0x80>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ee6:	23e0      	movs	r3, #224	; 0xe0
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f000 faa8 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40013000 	.word	0x40013000
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_UART_MspInit+0x7c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d128      	bne.n	8000f8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f000 fa66 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40021000 	.word	0x40021000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f90c 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001002:	f3af 8000 	nop.w
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
	}

return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_close>:
	}
	return len;
}

int _close(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001052:	605a      	str	r2, [r3, #4]
	return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_isatty>:

int _isatty(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	return 1;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f003 fa04 	bl	80044d0 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20010000 	.word	0x20010000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	20000098 	.word	0x20000098
 80010fc:	200011b0 	.word	0x200011b0

08001100 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114e:	f7ff ffd7 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 f9c3 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001156:	f7ff f893 	bl	8000280 <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800115c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001168:	080059d8 	.word	0x080059d8
  ldr r2, =_sbss
 800116c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001170:	200011ac 	.word	0x200011ac

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f931 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fe5a 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f93b 	bl	800143e <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f911 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000010 	.word	0x20000010
 8001200:	2000000c 	.word	0x2000000c

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000010 	.word	0x20000010
 8001228:	20001198 	.word	0x20001198

0800122c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20001198 	.word	0x20001198

08001244 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000010 	.word	0x20000010

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff47 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff5c 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffb0 	bl	80013ac <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e160      	b.n	800172a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8152 	beq.w	8001724 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d00b      	beq.n	80014a0 <HAL_GPIO_Init+0x48>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d007      	beq.n	80014a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001494:	2b11      	cmp	r3, #17
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b12      	cmp	r3, #18
 800149e:	d130      	bne.n	8001502 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d6:	2201      	movs	r2, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 0201 	and.w	r2, r3, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0xea>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b12      	cmp	r3, #18
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0203 	and.w	r2, r3, #3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80ac 	beq.w	8001724 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	4b5e      	ldr	r3, [pc, #376]	; (8001748 <HAL_GPIO_Init+0x2f0>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <HAL_GPIO_Init+0x2f0>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_GPIO_Init+0x2f0>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015e4:	4a59      	ldr	r2, [pc, #356]	; (800174c <HAL_GPIO_Init+0x2f4>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800160e:	d025      	beq.n	800165c <HAL_GPIO_Init+0x204>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a4f      	ldr	r2, [pc, #316]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d01f      	beq.n	8001658 <HAL_GPIO_Init+0x200>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_GPIO_Init+0x2fc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d019      	beq.n	8001654 <HAL_GPIO_Init+0x1fc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a4d      	ldr	r2, [pc, #308]	; (8001758 <HAL_GPIO_Init+0x300>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_GPIO_Init+0x1f8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_GPIO_Init+0x304>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1f4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4b      	ldr	r2, [pc, #300]	; (8001760 <HAL_GPIO_Init+0x308>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1f0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_GPIO_Init+0x30c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1ec>
 8001640:	2306      	movs	r3, #6
 8001642:	e00c      	b.n	800165e <HAL_GPIO_Init+0x206>
 8001644:	2307      	movs	r3, #7
 8001646:	e00a      	b.n	800165e <HAL_GPIO_Init+0x206>
 8001648:	2305      	movs	r3, #5
 800164a:	e008      	b.n	800165e <HAL_GPIO_Init+0x206>
 800164c:	2304      	movs	r3, #4
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x206>
 8001650:	2303      	movs	r3, #3
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x206>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x206>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x206>
 800165c:	2300      	movs	r3, #0
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800166e:	4937      	ldr	r1, [pc, #220]	; (800174c <HAL_GPIO_Init+0x2f4>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_GPIO_Init+0x310>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <HAL_GPIO_Init+0x310>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_GPIO_Init+0x310>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ca:	4a27      	ldr	r2, [pc, #156]	; (8001768 <HAL_GPIO_Init+0x310>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_GPIO_Init+0x310>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_GPIO_Init+0x310>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_GPIO_Init+0x310>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <HAL_GPIO_Init+0x310>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f ae97 	bne.w	8001468 <HAL_GPIO_Init+0x10>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	40010000 	.word	0x40010000
 8001750:	48000400 	.word	0x48000400
 8001754:	48000800 	.word	0x48000800
 8001758:	48000c00 	.word	0x48000c00
 800175c:	48001000 	.word	0x48001000
 8001760:	48001400 	.word	0x48001400
 8001764:	48001800 	.word	0x48001800
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001788:	e002      	b.n	8001790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f000 bf01 	b.w	80025b8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8160 	beq.w	8001a86 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017c6:	4bae      	ldr	r3, [pc, #696]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d00c      	beq.n	80017ec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d2:	4bab      	ldr	r3, [pc, #684]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d159      	bne.n	8001892 <HAL_RCC_OscConfig+0xf6>
 80017de:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ea:	d152      	bne.n	8001892 <HAL_RCC_OscConfig+0xf6>
 80017ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001800:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <HAL_RCC_OscConfig+0x82>
 8001818:	4b99      	ldr	r3, [pc, #612]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0xae>
 800181e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001822:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001836:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800183a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001846:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800184e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001852:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001856:	fa92 f2a2 	rbit	r2, r2
 800185a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800185e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f002 021f 	and.w	r2, r2, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8102 	beq.w	8001a84 <HAL_RCC_OscConfig+0x2e8>
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 80fc 	bne.w	8001a84 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	f000 be93 	b.w	80025b8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x110>
 800189e:	4b78      	ldr	r3, [pc, #480]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a77      	ldr	r2, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e030      	b.n	800190e <HAL_RCC_OscConfig+0x172>
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x134>
 80018b6:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a71      	ldr	r2, [pc, #452]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6e      	ldr	r2, [pc, #440]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e01e      	b.n	800190e <HAL_RCC_OscConfig+0x172>
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018da:	d10c      	bne.n	80018f6 <HAL_RCC_OscConfig+0x15a>
 80018dc:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a67      	ldr	r2, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b65      	ldr	r3, [pc, #404]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a64      	ldr	r2, [pc, #400]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e00b      	b.n	800190e <HAL_RCC_OscConfig+0x172>
 80018f6:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a61      	ldr	r2, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a5e      	ldr	r2, [pc, #376]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d059      	beq.n	80019cc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fc88 	bl	800122c <HAL_GetTick>
 800191c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001922:	f7ff fc83 	bl	800122c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d902      	bls.n	8001938 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	f000 be40 	b.w	80025b8 <HAL_RCC_OscConfig+0xe1c>
 8001938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800194c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x1ce>
 8001964:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x1fa>
 800196a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001982:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001986:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800199e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80019a2:	fa92 f2a2 	rbit	r2, r2
 80019a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80019aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019ae:	fab2 f282 	clz	r2, r2
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f042 0220 	orr.w	r2, r2, #32
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f002 021f 	and.w	r2, r2, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0ab      	beq.n	8001922 <HAL_RCC_OscConfig+0x186>
 80019ca:	e05c      	b.n	8001a86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc2e 	bl	800122c <HAL_GetTick>
 80019d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7ff fc29 	bl	800122c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d902      	bls.n	80019ec <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	f000 bde6 	b.w	80025b8 <HAL_RCC_OscConfig+0xe1c>
 80019ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0x282>
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x2ae>
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_RCC_OscConfig+0x2e4>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ab      	bne.n	80019d6 <HAL_RCC_OscConfig+0x23a>
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_OscConfig+0x2ea>
 8001a80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8170 	beq.w	8001d76 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a96:	4bd0      	ldr	r3, [pc, #832]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00c      	beq.n	8001abc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aa2:	4bcd      	ldr	r3, [pc, #820]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d16d      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3ee>
 8001aae:	4bca      	ldr	r3, [pc, #808]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aba:	d166      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3ee>
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001ace:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_OscConfig+0x350>
 8001ae6:	4bbc      	ldr	r3, [pc, #752]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e013      	b.n	8001b14 <HAL_RCC_OscConfig+0x378>
 8001aec:	2302      	movs	r3, #2
 8001aee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001afe:	2302      	movs	r3, #2
 8001b00:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b04:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b10:	4bb1      	ldr	r3, [pc, #708]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2202      	movs	r2, #2
 8001b16:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b1a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b1e:	fa92 f2a2 	rbit	r2, r2
 8001b22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b2a:	fab2 f282 	clz	r2, r2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f042 0220 	orr.w	r2, r2, #32
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f002 021f 	and.w	r2, r2, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_RCC_OscConfig+0x3ba>
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d002      	beq.n	8001b56 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f000 bd31 	b.w	80025b8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4ba0      	ldr	r3, [pc, #640]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	21f8      	movs	r1, #248	; 0xf8
 8001b66:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b6e:	fa91 f1a1 	rbit	r1, r1
 8001b72:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b76:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b7a:	fab1 f181 	clz	r1, r1
 8001b7e:	b2c9      	uxtb	r1, r1
 8001b80:	408b      	lsls	r3, r1
 8001b82:	4995      	ldr	r1, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	e0f5      	b.n	8001d76 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8085 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x504>
 8001b96:	2301      	movs	r3, #1
 8001b98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ba8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fb33 	bl	800122c <HAL_GetTick>
 8001bc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fb2e 	bl	800122c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d902      	bls.n	8001be2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	f000 bceb 	b.w	80025b8 <HAL_RCC_OscConfig+0xe1c>
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001bf4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_OscConfig+0x476>
 8001c0c:	4b72      	ldr	r3, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e013      	b.n	8001c3a <HAL_RCC_OscConfig+0x49e>
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c36:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c40:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c44:	fa92 f2a2 	rbit	r2, r2
 8001c48:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c50:	fab2 f282 	clz	r2, r2
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	f042 0220 	orr.w	r2, r2, #32
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f002 021f 	and.w	r2, r2, #31
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0af      	beq.n	8001bcc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	21f8      	movs	r1, #248	; 0xf8
 8001c7c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c84:	fa91 f1a1 	rbit	r1, r1
 8001c88:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c90:	fab1 f181 	clz	r1, r1
 8001c94:	b2c9      	uxtb	r1, r1
 8001c96:	408b      	lsls	r3, r1
 8001c98:	494f      	ldr	r1, [pc, #316]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
 8001c9e:	e06a      	b.n	8001d76 <HAL_RCC_OscConfig+0x5da>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001cb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff faae 	bl	800122c <HAL_GetTick>
 8001cd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff faa9 	bl	800122c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d902      	bls.n	8001cec <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f000 bc66 	b.w	80025b8 <HAL_RCC_OscConfig+0xe1c>
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001cfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d102      	bne.n	8001d1c <HAL_RCC_OscConfig+0x580>
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	e013      	b.n	8001d44 <HAL_RCC_OscConfig+0x5a8>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_OscConfig+0x63c>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	2202      	movs	r2, #2
 8001d46:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d4a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f002 021f 	and.w	r2, r2, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1af      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80da 	beq.w	8001f3a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d069      	beq.n	8001e64 <HAL_RCC_OscConfig+0x6c8>
 8001d90:	2301      	movs	r3, #1
 8001d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001da2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x640>)
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	461a      	mov	r2, r3
 8001db6:	2301      	movs	r3, #1
 8001db8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fa37 	bl	800122c <HAL_GetTick>
 8001dbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e00d      	b.n	8001de0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fa32 	bl	800122c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d905      	bls.n	8001de0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e3ef      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	10908120 	.word	0x10908120
 8001de0:	2302      	movs	r3, #2
 8001de2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e24:	4ba4      	ldr	r3, [pc, #656]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	6019      	str	r1, [r3, #0]
 8001e30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f1a3 	rbit	r1, r3
 8001e3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e3e:	6019      	str	r1, [r3, #0]
  return result;
 8001e40:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0b0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x628>
 8001e62:	e06a      	b.n	8001f3a <HAL_RCC_OscConfig+0x79e>
 8001e64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e7a:	601a      	str	r2, [r3, #0]
  return result;
 8001e7c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x920>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	461a      	mov	r2, r3
 8001e92:	2300      	movs	r3, #0
 8001e94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff f9c9 	bl	800122c <HAL_GetTick>
 8001e9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f9c4 	bl	800122c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e381      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
 8001eb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001eb8:	2202      	movs	r2, #2
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ee8:	2202      	movs	r2, #2
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001efa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f04:	2102      	movs	r1, #2
 8001f06:	6019      	str	r1, [r3, #0]
 8001f08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f1a3 	rbit	r1, r3
 8001f12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f16:	6019      	str	r1, [r3, #0]
  return result;
 8001f18:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1b2      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8157 	beq.w	80021f8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d112      	bne.n	8001f82 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	4a55      	ldr	r2, [pc, #340]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	61d3      	str	r3, [r2, #28]
 8001f68:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x924>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x924>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a4b      	ldr	r2, [pc, #300]	; (80020c0 <HAL_RCC_OscConfig+0x924>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f947 	bl	800122c <HAL_GetTick>
 8001f9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa4:	f7ff f942 	bl	800122c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e2ff      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_OscConfig+0x924>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ef      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x840>
 8001fce:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	e02f      	b.n	800203c <HAL_RCC_OscConfig+0x8a0>
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x864>
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a33      	ldr	r2, [pc, #204]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0x8a0>
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b05      	cmp	r3, #5
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x888>
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6213      	str	r3, [r2, #32]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0x8a0>
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 8002036:	f023 0304 	bic.w	r3, r3, #4
 800203a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d06a      	beq.n	800211c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff f8f1 	bl	800122c <HAL_GetTick>
 800204a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7ff f8ec 	bl	800122c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e2a7      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
 8002068:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800206c:	2202      	movs	r2, #2
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002084:	2202      	movs	r2, #2
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002096:	601a      	str	r2, [r3, #0]
  return result;
 8002098:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800209c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d108      	bne.n	80020c4 <HAL_RCC_OscConfig+0x928>
 80020b2:	4b01      	ldr	r3, [pc, #4]	; (80020b8 <HAL_RCC_OscConfig+0x91c>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	e013      	b.n	80020e0 <HAL_RCC_OscConfig+0x944>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	10908120 	.word	0x10908120
 80020c0:	40007000 	.word	0x40007000
 80020c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020c8:	2202      	movs	r2, #2
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4bc0      	ldr	r3, [pc, #768]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80020e4:	2102      	movs	r1, #2
 80020e6:	6011      	str	r1, [r2, #0]
 80020e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	fa92 f1a2 	rbit	r1, r2
 80020f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020f6:	6011      	str	r1, [r2, #0]
  return result;
 80020f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d09a      	beq.n	8002050 <HAL_RCC_OscConfig+0x8b4>
 800211a:	e063      	b.n	80021e4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7ff f886 	bl	800122c <HAL_GetTick>
 8002120:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff f881 	bl	800122c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e23c      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
 800213e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800216c:	601a      	str	r2, [r3, #0]
  return result;
 800216e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002172:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d102      	bne.n	800218e <HAL_RCC_OscConfig+0x9f2>
 8002188:	4b95      	ldr	r3, [pc, #596]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	e00d      	b.n	80021aa <HAL_RCC_OscConfig+0xa0e>
 800218e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	4b8e      	ldr	r3, [pc, #568]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021ae:	2102      	movs	r1, #2
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	fa92 f1a2 	rbit	r1, r2
 80021bc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021c0:	6011      	str	r1, [r2, #0]
  return result;
 80021c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 021f 	and.w	r2, r2, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1a0      	bne.n	8002126 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b7c      	ldr	r3, [pc, #496]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a7b      	ldr	r2, [pc, #492]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 81d9 	beq.w	80025b6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	f000 81a6 	beq.w	800255e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b02      	cmp	r3, #2
 800221a:	f040 811e 	bne.w	800245a <HAL_RCC_OscConfig+0xcbe>
 800221e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002222:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800223c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe ffea 	bl	800122c <HAL_GetTick>
 8002258:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e009      	b.n	8002272 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe ffe5 	bl	800122c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1a2      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
 8002272:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800228a:	601a      	str	r2, [r3, #0]
  return result;
 800228c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002290:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_OscConfig+0xb10>
 80022a6:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	e01b      	b.n	80022e4 <HAL_RCC_OscConfig+0xb48>
 80022ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80022e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	fa92 f1a2 	rbit	r1, r2
 80022f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022fc:	6011      	str	r1, [r2, #0]
  return result;
 80022fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f042 0220 	orr.w	r2, r2, #32
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f002 021f 	and.w	r2, r2, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d19e      	bne.n	800225e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f023 020f 	bic.w	r2, r3, #15
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	492c      	ldr	r1, [pc, #176]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 8002330:	4313      	orrs	r3, r2
 8002332:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002334:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a19      	ldr	r1, [r3, #32]
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	430b      	orrs	r3, r1
 800234a:	4925      	ldr	r1, [pc, #148]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002368:	601a      	str	r2, [r3, #0]
  return result;
 800236a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800236e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800237a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	461a      	mov	r2, r3
 8002382:	2301      	movs	r3, #1
 8002384:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe ff51 	bl	800122c <HAL_GetTick>
 800238a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238e:	e009      	b.n	80023a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe ff4c 	bl	800122c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e109      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
 80023a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023bc:	601a      	str	r2, [r3, #0]
  return result;
 80023be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0xc48>
 80023d8:	4b01      	ldr	r3, [pc, #4]	; (80023e0 <HAL_RCC_OscConfig+0xc44>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e01e      	b.n	800241c <HAL_RCC_OscConfig+0xc80>
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_OscConfig+0xe28>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002420:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002424:	6011      	str	r1, [r2, #0]
 8002426:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	fa92 f1a2 	rbit	r1, r2
 8002430:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002434:	6011      	str	r1, [r2, #0]
  return result;
 8002436:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f002 021f 	and.w	r2, r2, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d09b      	beq.n	8002390 <HAL_RCC_OscConfig+0xbf4>
 8002458:	e0ad      	b.n	80025b6 <HAL_RCC_OscConfig+0xe1a>
 800245a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002472:	601a      	str	r2, [r3, #0]
  return result;
 8002474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002478:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	461a      	mov	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fecc 	bl	800122c <HAL_GetTick>
 8002494:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	e009      	b.n	80024ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe fec7 	bl	800122c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e084      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
 80024ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c6:	601a      	str	r2, [r3, #0]
  return result;
 80024c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_OscConfig+0xd4c>
 80024e2:	4b38      	ldr	r3, [pc, #224]	; (80025c4 <HAL_RCC_OscConfig+0xe28>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e01b      	b.n	8002520 <HAL_RCC_OscConfig+0xd84>
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f2a3 	rbit	r2, r3
 8002516:	f107 0318 	add.w	r3, r7, #24
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_OscConfig+0xe28>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f107 0214 	add.w	r2, r7, #20
 8002524:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	f107 0214 	add.w	r2, r7, #20
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fa92 f1a2 	rbit	r1, r2
 8002534:	f107 0210 	add.w	r2, r7, #16
 8002538:	6011      	str	r1, [r2, #0]
  return result;
 800253a:	f107 0210 	add.w	r2, r7, #16
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	f042 0220 	orr.w	r2, r2, #32
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f002 021f 	and.w	r2, r2, #31
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d19e      	bne.n	800249a <HAL_RCC_OscConfig+0xcfe>
 800255c:	e02b      	b.n	80025b6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e025      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_RCC_OscConfig+0xe28>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_OscConfig+0xe28>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800257c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002580:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	429a      	cmp	r2, r3
 800258c:	d111      	bne.n	80025b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800258e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800259c:	429a      	cmp	r2, r3
 800259e:	d108      	bne.n	80025b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80025a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b09e      	sub	sp, #120	; 0x78
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e162      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b90      	ldr	r3, [pc, #576]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b8d      	ldr	r3, [pc, #564]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	498b      	ldr	r1, [pc, #556]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b89      	ldr	r3, [pc, #548]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e14a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	497f      	ldr	r1, [pc, #508]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80dc 	beq.w	80027f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d13c      	bne.n	80026be <HAL_RCC_ClockConfig+0xf6>
 8002644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002648:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_RCC_ClockConfig+0xa6>
 8002668:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	e00f      	b.n	800268e <HAL_RCC_ClockConfig+0xc6>
 800266e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002672:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	667b      	str	r3, [r7, #100]	; 0x64
 800267c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002680:	663b      	str	r3, [r7, #96]	; 0x60
 8002682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002692:	65ba      	str	r2, [r7, #88]	; 0x58
 8002694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800269c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d17b      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0f3      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d13c      	bne.n	8002740 <HAL_RCC_ClockConfig+0x178>
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x128>
 80026ea:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_ClockConfig+0x148>
 80026f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	647b      	str	r3, [r7, #68]	; 0x44
 80026fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
 8002704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	63ba      	str	r2, [r7, #56]	; 0x38
 8002716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002718:	fa92 f2a2 	rbit	r2, r2
 800271c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800271e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f002 021f 	and.w	r2, r2, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d13a      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b2      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
 8002740:	2302      	movs	r3, #2
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d102      	bne.n	8002768 <HAL_RCC_ClockConfig+0x1a0>
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	e00d      	b.n	8002784 <HAL_RCC_ClockConfig+0x1bc>
 8002768:	2302      	movs	r3, #2
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2202      	movs	r2, #2
 8002786:	61ba      	str	r2, [r7, #24]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	fa92 f2a2 	rbit	r2, r2
 800278e:	617a      	str	r2, [r7, #20]
  return result;
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e079      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	491a      	ldr	r1, [pc, #104]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fd32 	bl	800122c <HAL_GetTick>
 80027c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe fd2e 	bl	800122c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e061      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d214      	bcs.n	800282c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4906      	ldr	r1, [pc, #24]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <HAL_RCC_ClockConfig+0x25c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e040      	b.n	80028a6 <HAL_RCC_ClockConfig+0x2de>
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	491a      	ldr	r1, [pc, #104]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4912      	ldr	r1, [pc, #72]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800286a:	f000 f829 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002878:	22f0      	movs	r2, #240	; 0xf0
 800287a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	fa92 f2a2 	rbit	r2, r2
 8002882:	60fa      	str	r2, [r7, #12]
  return result;
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	fab2 f282 	clz	r2, r2
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	40d3      	lsrs	r3, r2
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	fa21 f303 	lsr.w	r3, r1, r3
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCC_ClockConfig+0x2f4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fc80 	bl	80011a4 <HAL_InitTick>
  
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3778      	adds	r7, #120	; 0x78
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08005900 	.word	0x08005900
 80028b8:	20000008 	.word	0x20000008
 80028bc:	2000000c 	.word	0x2000000c

080028c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b08b      	sub	sp, #44	; 0x2c
 80028c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x36>
 80028ee:	e03f      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028f2:	623b      	str	r3, [r7, #32]
      break;
 80028f4:	e03f      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002900:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	607a      	str	r2, [r7, #4]
  return result;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	40d3      	lsrs	r3, r2
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_RCC_GetSysClockFreq+0xc4>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	220f      	movs	r2, #15
 8002924:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	fa92 f2a2 	rbit	r2, r2
 800292c:	60fa      	str	r2, [r7, #12]
  return result;
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	fab2 f282 	clz	r2, r2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	40d3      	lsrs	r3, r2
 8002938:	4a15      	ldr	r2, [pc, #84]	; (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002948:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <HAL_RCC_GetSysClockFreq+0xc8>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	e007      	b.n	800296a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_GetSysClockFreq+0xc8>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	623b      	str	r3, [r7, #32]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002972:	623b      	str	r3, [r7, #32]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	6a3b      	ldr	r3, [r7, #32]
}
 8002978:	4618      	mov	r0, r3
 800297a:	372c      	adds	r7, #44	; 0x2c
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40021000 	.word	0x40021000
 8002988:	007a1200 	.word	0x007a1200
 800298c:	08005918 	.word	0x08005918
 8002990:	08005928 	.word	0x08005928

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000008 	.word	0x20000008

080029ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029b2:	f7ff ffef 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b6:	4601      	mov	r1, r0
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	603a      	str	r2, [r7, #0]
  return result;
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	fab2 f282 	clz	r2, r2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	40d3      	lsrs	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08005910 	.word	0x08005910

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029f6:	f7ff ffcd 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029fa:	4601      	mov	r1, r0
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a04:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	fa92 f2a2 	rbit	r2, r2
 8002a10:	603a      	str	r2, [r7, #0]
  return result;
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	fab2 f282 	clz	r2, r2
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	40d3      	lsrs	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08005910 	.word	0x08005910

08002a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b092      	sub	sp, #72	; 0x48
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80d4 	beq.w	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a58:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10e      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	61d3      	str	r3, [r2, #28]
 8002a70:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a41      	ldr	r2, [pc, #260]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fbc7 	bl	800122c <HAL_GetTick>
 8002a9e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7fe fbc3 	bl	800122c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1d6      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ac0:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8084 	beq.w	8002bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d07c      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2300      	movs	r3, #0
 8002b30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b32:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04b      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fb73 	bl	800122c <HAL_GetTick>
 8002b46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fb6f 	bl	800122c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e180      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	61fb      	str	r3, [r7, #28]
  return result;
 8002b78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d108      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b8e:	4b01      	ldr	r3, [pc, #4]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	e00d      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	10908100 	.word	0x10908100
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	4ba0      	ldr	r3, [pc, #640]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	613a      	str	r2, [r7, #16]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	fa92 f2a2 	rbit	r2, r2
 8002bba:	60fa      	str	r2, [r7, #12]
  return result;
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f002 021f 	and.w	r2, r2, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0b7      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bda:	4b95      	ldr	r3, [pc, #596]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4992      	ldr	r1, [pc, #584]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf4:	4b8e      	ldr	r3, [pc, #568]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4a8d      	ldr	r2, [pc, #564]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c0c:	4b88      	ldr	r3, [pc, #544]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f023 0203 	bic.w	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4985      	ldr	r1, [pc, #532]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c2a:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	497e      	ldr	r1, [pc, #504]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c48:	4b79      	ldr	r3, [pc, #484]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4976      	ldr	r1, [pc, #472]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c66:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f023 0210 	bic.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	496f      	ldr	r1, [pc, #444]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	4967      	ldr	r1, [pc, #412]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f023 0220 	bic.w	r2, r3, #32
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4960      	ldr	r1, [pc, #384]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	4958      	ldr	r1, [pc, #352]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4951      	ldr	r1, [pc, #324]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4949      	ldr	r1, [pc, #292]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d1a:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4942      	ldr	r1, [pc, #264]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d38:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	493a      	ldr	r1, [pc, #232]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4933      	ldr	r1, [pc, #204]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	492b      	ldr	r1, [pc, #172]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4924      	ldr	r1, [pc, #144]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002db0:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	491c      	ldr	r1, [pc, #112]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	4915      	ldr	r1, [pc, #84]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	490d      	ldr	r1, [pc, #52]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e16:	4906      	ldr	r1, [pc, #24]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e28:	4b01      	ldr	r3, [pc, #4]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	e002      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	490b      	ldr	r1, [pc, #44]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5a:	4904      	ldr	r1, [pc, #16]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3748      	adds	r7, #72	; 0x48
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e09d      	b.n	8002fbe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d108      	bne.n	8002e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e92:	d009      	beq.n	8002ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
 8002e9a:	e005      	b.n	8002ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd ffe6 	bl	8000e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ede:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee8:	d902      	bls.n	8002ef0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e002      	b.n	8002ef6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002efe:	d007      	beq.n	8002f10 <HAL_SPI_Init+0xa0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f08:	d002      	beq.n	8002f10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	ea42 0103 	orr.w	r1, r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	f003 0204 	and.w	r2, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f8c:	ea42 0103 	orr.w	r1, r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b088      	sub	sp, #32
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_SPI_Transmit+0x22>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e158      	b.n	800329a <HAL_SPI_Transmit+0x2d4>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff0:	f7fe f91c 	bl	800122c <HAL_GetTick>
 8002ff4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d002      	beq.n	800300c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800300a:	e13d      	b.n	8003288 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_SPI_Transmit+0x52>
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800301c:	e134      	b.n	8003288 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2203      	movs	r2, #3
 8003022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d10f      	bne.n	800308a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003078:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d007      	beq.n	80030a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b0:	d94b      	bls.n	800314a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_Transmit+0xfa>
 80030ba:	8afb      	ldrh	r3, [r7, #22]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d13e      	bne.n	800313e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	881a      	ldrh	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	1c9a      	adds	r2, r3, #2
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030e4:	e02b      	b.n	800313e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d112      	bne.n	800311a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	881a      	ldrh	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	1c9a      	adds	r2, r3, #2
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003118:	e011      	b.n	800313e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800311a:	f7fe f887 	bl	800122c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d803      	bhi.n	8003132 <HAL_SPI_Transmit+0x16c>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d102      	bne.n	8003138 <HAL_SPI_Transmit+0x172>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800313c:	e0a4      	b.n	8003288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ce      	bne.n	80030e6 <HAL_SPI_Transmit+0x120>
 8003148:	e07c      	b.n	8003244 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Transmit+0x192>
 8003152:	8afb      	ldrh	r3, [r7, #22]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d170      	bne.n	800323a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d912      	bls.n	8003188 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	1c9a      	adds	r2, r3, #2
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b02      	subs	r3, #2
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003186:	e058      	b.n	800323a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	330c      	adds	r3, #12
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031ae:	e044      	b.n	800323a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d12b      	bne.n	8003216 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d912      	bls.n	80031ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	1c9a      	adds	r2, r3, #2
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b02      	subs	r3, #2
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ec:	e025      	b.n	800323a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003214:	e011      	b.n	800323a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003216:	f7fe f809 	bl	800122c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d803      	bhi.n	800322e <HAL_SPI_Transmit+0x268>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d102      	bne.n	8003234 <HAL_SPI_Transmit+0x26e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003238:	e026      	b.n	8003288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1b5      	bne.n	80031b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fcdb 	bl	8003c04 <SPI_EndRxTxTransaction>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e000      	b.n	8003288 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003298:	7ffb      	ldrb	r3, [r7, #31]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032be:	d112      	bne.n	80032e6 <HAL_SPI_Receive+0x44>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10e      	bne.n	80032e6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2204      	movs	r2, #4
 80032cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f910 	bl	8003502 <HAL_SPI_TransmitReceive>
 80032e2:	4603      	mov	r3, r0
 80032e4:	e109      	b.n	80034fa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_SPI_Receive+0x52>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e102      	b.n	80034fa <HAL_SPI_Receive+0x258>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fc:	f7fd ff96 	bl	800122c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003312:	e0e9      	b.n	80034e8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Receive+0x7e>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003324:	e0e0      	b.n	80034e8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2204      	movs	r2, #4
 800332a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003370:	d908      	bls.n	8003384 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	e007      	b.n	8003394 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800339c:	d10f      	bne.n	80033be <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d007      	beq.n	80033dc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033e4:	d867      	bhi.n	80034b6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033e6:	e030      	b.n	800344a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d117      	bne.n	8003426 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f103 020c 	add.w	r2, r3, #12
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	7812      	ldrb	r2, [r2, #0]
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003424:	e011      	b.n	800344a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003426:	f7fd ff01 	bl	800122c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d803      	bhi.n	800343e <HAL_SPI_Receive+0x19c>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d102      	bne.n	8003444 <HAL_SPI_Receive+0x1a2>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003448:	e04e      	b.n	80034e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1c8      	bne.n	80033e8 <HAL_SPI_Receive+0x146>
 8003456:	e034      	b.n	80034c2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d115      	bne.n	8003492 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	b292      	uxth	r2, r2
 8003472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	1c9a      	adds	r2, r3, #2
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003490:	e011      	b.n	80034b6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003492:	f7fd fecb 	bl	800122c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d803      	bhi.n	80034aa <HAL_SPI_Receive+0x208>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d102      	bne.n	80034b0 <HAL_SPI_Receive+0x20e>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034b4:	e018      	b.n	80034e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ca      	bne.n	8003458 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fb44 	bl	8003b54 <SPI_EndRxTransaction>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
 80034e4:	e000      	b.n	80034e8 <HAL_SPI_Receive+0x246>
  }

error :
 80034e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	; 0x28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003510:	2301      	movs	r3, #1
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_SPI_TransmitReceive+0x26>
 8003524:	2302      	movs	r3, #2
 8003526:	e1fb      	b.n	8003920 <HAL_SPI_TransmitReceive+0x41e>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003530:	f7fd fe7c 	bl	800122c <HAL_GetTick>
 8003534:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800353c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800354c:	7efb      	ldrb	r3, [r7, #27]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d00e      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x6e>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003558:	d106      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x66>
 8003562:	7efb      	ldrb	r3, [r7, #27]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d003      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800356e:	e1cd      	b.n	800390c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_SPI_TransmitReceive+0x80>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_SPI_TransmitReceive+0x80>
 800357c:	887b      	ldrh	r3, [r7, #2]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003588:	e1c0      	b.n	800390c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b04      	cmp	r3, #4
 8003594:	d003      	beq.n	800359e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2205      	movs	r2, #5
 800359a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	887a      	ldrh	r2, [r7, #2]
 80035ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	887a      	ldrh	r2, [r7, #2]
 80035b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	887a      	ldrh	r2, [r7, #2]
 80035ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035e0:	d802      	bhi.n	80035e8 <HAL_SPI_TransmitReceive+0xe6>
 80035e2:	8a3b      	ldrh	r3, [r7, #16]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d908      	bls.n	80035fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e007      	b.n	800360a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d007      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003630:	d97c      	bls.n	800372c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x13e>
 800363a:	8a7b      	ldrh	r3, [r7, #18]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d169      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003664:	e056      	b.n	8003714 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d11b      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x1aa>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x1aa>
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	2b01      	cmp	r3, #1
 8003682:	d113      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d11c      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x1f2>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	b292      	uxth	r2, r2
 80036d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036f0:	2301      	movs	r3, #1
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036f4:	f7fd fd9a 	bl	800122c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003700:	429a      	cmp	r2, r3
 8003702:	d807      	bhi.n	8003714 <HAL_SPI_TransmitReceive+0x212>
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d003      	beq.n	8003714 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003712:	e0fb      	b.n	800390c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1a3      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x164>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d19d      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x164>
 800372a:	e0df      	b.n	80038ec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_SPI_TransmitReceive+0x23a>
 8003734:	8a7b      	ldrh	r3, [r7, #18]
 8003736:	2b01      	cmp	r3, #1
 8003738:	f040 80cb 	bne.w	80038d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d912      	bls.n	800376c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b02      	subs	r3, #2
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	87da      	strh	r2, [r3, #62]	; 0x3e
 800376a:	e0b2      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003792:	e09e      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d134      	bne.n	800380c <HAL_SPI_TransmitReceive+0x30a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02f      	beq.n	800380c <HAL_SPI_TransmitReceive+0x30a>
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d12c      	bne.n	800380c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d912      	bls.n	80037e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	1c9a      	adds	r2, r3, #2
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b02      	subs	r3, #2
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037e0:	e012      	b.n	8003808 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	7812      	ldrb	r2, [r2, #0]
 80037ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d148      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x3aa>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d042      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d923      	bls.n	800387a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	b292      	uxth	r2, r2
 800383e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	1c9a      	adds	r2, r3, #2
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b02      	subs	r3, #2
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d81f      	bhi.n	80038a8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	e016      	b.n	80038a8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f103 020c 	add.w	r2, r3, #12
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038ac:	f7fd fcbe 	bl	800122c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d803      	bhi.n	80038c4 <HAL_SPI_TransmitReceive+0x3c2>
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d102      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x3c8>
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038d0:	e01c      	b.n	800390c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f af5b 	bne.w	8003794 <HAL_SPI_TransmitReceive+0x292>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f47f af54 	bne.w	8003794 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f987 	bl	8003c04 <SPI_EndRxTxTransaction>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	661a      	str	r2, [r3, #96]	; 0x60
 8003908:	e000      	b.n	800390c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800390a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800391c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003920:	4618      	mov	r0, r3
 8003922:	3728      	adds	r7, #40	; 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003938:	f7fd fc78 	bl	800122c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4413      	add	r3, r2
 8003946:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003948:	f7fd fc70 	bl	800122c <HAL_GetTick>
 800394c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800394e:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	0d1b      	lsrs	r3, r3, #20
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800395e:	e054      	b.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d050      	beq.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003968:	f7fd fc60 	bl	800122c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	429a      	cmp	r2, r3
 8003976:	d902      	bls.n	800397e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d13d      	bne.n	80039fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800398c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003996:	d111      	bne.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	d004      	beq.n	80039ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039aa:	d107      	bne.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c4:	d10f      	bne.n	80039e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e017      	b.n	8003a2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d19b      	bne.n	8003960 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000008 	.word	0x20000008

08003a38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a46:	f7fd fbf1 	bl	800122c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a56:	f7fd fbe9 	bl	800122c <HAL_GetTick>
 8003a5a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a5c:	4b3c      	ldr	r3, [pc, #240]	; (8003b50 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00da      	lsls	r2, r3, #3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	0d1b      	lsrs	r3, r3, #20
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a74:	e05f      	b.n	8003b36 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a7c:	d106      	bne.n	8003a8c <SPI_WaitFifoStateUntilTimeout+0x54>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d103      	bne.n	8003a8c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d050      	beq.n	8003b36 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a94:	f7fd fbca 	bl	800122c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d902      	bls.n	8003aaa <SPI_WaitFifoStateUntilTimeout+0x72>
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d13d      	bne.n	8003b26 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac2:	d111      	bne.n	8003ae8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003acc:	d004      	beq.n	8003ad8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d107      	bne.n	8003ae8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af0:	d10f      	bne.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e010      	b.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d197      	bne.n	8003a76 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000008 	.word	0x20000008

08003b54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b68:	d111      	bne.n	8003b8e <SPI_EndRxTransaction+0x3a>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b72:	d004      	beq.n	8003b7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7c:	d107      	bne.n	8003b8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff fec5 	bl	8003928 <SPI_WaitFlagStateUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e023      	b.n	8003bfc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bbc:	d11d      	bne.n	8003bfa <SPI_EndRxTransaction+0xa6>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d004      	beq.n	8003bd2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d113      	bne.n	8003bfa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff ff2a 	bl	8003a38 <SPI_WaitFifoStateUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e000      	b.n	8003bfc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff ff0b 	bl	8003a38 <SPI_WaitFifoStateUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e027      	b.n	8003c88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fe70 	bl	8003928 <SPI_WaitFlagStateUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e014      	b.n	8003c88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff fee4 	bl	8003a38 <SPI_WaitFifoStateUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e000      	b.n	8003c88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e040      	b.n	8003d24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fd f930 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8c0 	bl	8003e54 <UART_SetConfig>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e022      	b.n	8003d24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa8a 	bl	8004200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb11 	bl	8004344 <UART_CheckIdleState>
 8003d22:	4603      	mov	r3, r0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	f040 8082 	bne.w	8003e4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_Transmit+0x26>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07a      	b.n	8003e4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit+0x38>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e073      	b.n	8003e4c <HAL_UART_Transmit+0x120>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2221      	movs	r2, #33	; 0x21
 8003d78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fa57 	bl	800122c <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d98:	d108      	bne.n	8003dac <HAL_UART_Transmit+0x80>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e003      	b.n	8003db4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003dbc:	e02d      	b.n	8003e1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fb04 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e039      	b.n	8003e4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dea:	b292      	uxth	r2, r2
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	3302      	adds	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	e008      	b.n	8003e08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b292      	uxth	r2, r2
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3301      	adds	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1cb      	bne.n	8003dbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2140      	movs	r1, #64	; 0x40
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fad0 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e005      	b.n	8003e4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4bab      	ldr	r3, [pc, #684]	; (800412c <UART_SetConfig+0x2d8>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a99      	ldr	r2, [pc, #612]	; (8004130 <UART_SetConfig+0x2dc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d120      	bne.n	8003f12 <UART_SetConfig+0xbe>
 8003ed0:	4b98      	ldr	r3, [pc, #608]	; (8004134 <UART_SetConfig+0x2e0>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d817      	bhi.n	8003f0c <UART_SetConfig+0xb8>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x90>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003f01 	.word	0x08003f01
 8003eec:	08003f07 	.word	0x08003f07
 8003ef0:	08003efb 	.word	0x08003efb
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e0b5      	b.n	8004066 <UART_SetConfig+0x212>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0b2      	b.n	8004066 <UART_SetConfig+0x212>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e0af      	b.n	8004066 <UART_SetConfig+0x212>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e0ac      	b.n	8004066 <UART_SetConfig+0x212>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e0a9      	b.n	8004066 <UART_SetConfig+0x212>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a88      	ldr	r2, [pc, #544]	; (8004138 <UART_SetConfig+0x2e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d124      	bne.n	8003f66 <UART_SetConfig+0x112>
 8003f1c:	4b85      	ldr	r3, [pc, #532]	; (8004134 <UART_SetConfig+0x2e0>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f28:	d011      	beq.n	8003f4e <UART_SetConfig+0xfa>
 8003f2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f2e:	d817      	bhi.n	8003f60 <UART_SetConfig+0x10c>
 8003f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f34:	d011      	beq.n	8003f5a <UART_SetConfig+0x106>
 8003f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f3a:	d811      	bhi.n	8003f60 <UART_SetConfig+0x10c>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <UART_SetConfig+0xf4>
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d006      	beq.n	8003f54 <UART_SetConfig+0x100>
 8003f46:	e00b      	b.n	8003f60 <UART_SetConfig+0x10c>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e08b      	b.n	8004066 <UART_SetConfig+0x212>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e088      	b.n	8004066 <UART_SetConfig+0x212>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e085      	b.n	8004066 <UART_SetConfig+0x212>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e082      	b.n	8004066 <UART_SetConfig+0x212>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e07f      	b.n	8004066 <UART_SetConfig+0x212>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a74      	ldr	r2, [pc, #464]	; (800413c <UART_SetConfig+0x2e8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d124      	bne.n	8003fba <UART_SetConfig+0x166>
 8003f70:	4b70      	ldr	r3, [pc, #448]	; (8004134 <UART_SetConfig+0x2e0>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003f78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f7c:	d011      	beq.n	8003fa2 <UART_SetConfig+0x14e>
 8003f7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f82:	d817      	bhi.n	8003fb4 <UART_SetConfig+0x160>
 8003f84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f88:	d011      	beq.n	8003fae <UART_SetConfig+0x15a>
 8003f8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f8e:	d811      	bhi.n	8003fb4 <UART_SetConfig+0x160>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <UART_SetConfig+0x148>
 8003f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f98:	d006      	beq.n	8003fa8 <UART_SetConfig+0x154>
 8003f9a:	e00b      	b.n	8003fb4 <UART_SetConfig+0x160>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e061      	b.n	8004066 <UART_SetConfig+0x212>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e05e      	b.n	8004066 <UART_SetConfig+0x212>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e05b      	b.n	8004066 <UART_SetConfig+0x212>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e058      	b.n	8004066 <UART_SetConfig+0x212>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e055      	b.n	8004066 <UART_SetConfig+0x212>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a60      	ldr	r2, [pc, #384]	; (8004140 <UART_SetConfig+0x2ec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d124      	bne.n	800400e <UART_SetConfig+0x1ba>
 8003fc4:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <UART_SetConfig+0x2e0>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fd0:	d011      	beq.n	8003ff6 <UART_SetConfig+0x1a2>
 8003fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fd6:	d817      	bhi.n	8004008 <UART_SetConfig+0x1b4>
 8003fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fdc:	d011      	beq.n	8004002 <UART_SetConfig+0x1ae>
 8003fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe2:	d811      	bhi.n	8004008 <UART_SetConfig+0x1b4>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <UART_SetConfig+0x19c>
 8003fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fec:	d006      	beq.n	8003ffc <UART_SetConfig+0x1a8>
 8003fee:	e00b      	b.n	8004008 <UART_SetConfig+0x1b4>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e037      	b.n	8004066 <UART_SetConfig+0x212>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e034      	b.n	8004066 <UART_SetConfig+0x212>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e031      	b.n	8004066 <UART_SetConfig+0x212>
 8004002:	2308      	movs	r3, #8
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e02e      	b.n	8004066 <UART_SetConfig+0x212>
 8004008:	2310      	movs	r3, #16
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e02b      	b.n	8004066 <UART_SetConfig+0x212>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a4c      	ldr	r2, [pc, #304]	; (8004144 <UART_SetConfig+0x2f0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d124      	bne.n	8004062 <UART_SetConfig+0x20e>
 8004018:	4b46      	ldr	r3, [pc, #280]	; (8004134 <UART_SetConfig+0x2e0>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004024:	d011      	beq.n	800404a <UART_SetConfig+0x1f6>
 8004026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800402a:	d817      	bhi.n	800405c <UART_SetConfig+0x208>
 800402c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004030:	d011      	beq.n	8004056 <UART_SetConfig+0x202>
 8004032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004036:	d811      	bhi.n	800405c <UART_SetConfig+0x208>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <UART_SetConfig+0x1f0>
 800403c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004040:	d006      	beq.n	8004050 <UART_SetConfig+0x1fc>
 8004042:	e00b      	b.n	800405c <UART_SetConfig+0x208>
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x212>
 800404a:	2302      	movs	r3, #2
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e00a      	b.n	8004066 <UART_SetConfig+0x212>
 8004050:	2304      	movs	r3, #4
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e007      	b.n	8004066 <UART_SetConfig+0x212>
 8004056:	2308      	movs	r3, #8
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e004      	b.n	8004066 <UART_SetConfig+0x212>
 800405c:	2310      	movs	r3, #16
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e001      	b.n	8004066 <UART_SetConfig+0x212>
 8004062:	2310      	movs	r3, #16
 8004064:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406e:	d16d      	bne.n	800414c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d827      	bhi.n	80040c6 <UART_SetConfig+0x272>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <UART_SetConfig+0x228>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	080040a1 	.word	0x080040a1
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040b1 	.word	0x080040b1
 8004088:	080040c7 	.word	0x080040c7
 800408c:	080040b7 	.word	0x080040b7
 8004090:	080040c7 	.word	0x080040c7
 8004094:	080040c7 	.word	0x080040c7
 8004098:	080040c7 	.word	0x080040c7
 800409c:	080040bf 	.word	0x080040bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe fc84 	bl	80029ac <HAL_RCC_GetPCLK1Freq>
 80040a4:	61b8      	str	r0, [r7, #24]
        break;
 80040a6:	e013      	b.n	80040d0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a8:	f7fe fca2 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 80040ac:	61b8      	str	r0, [r7, #24]
        break;
 80040ae:	e00f      	b.n	80040d0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <UART_SetConfig+0x2f4>)
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e00c      	b.n	80040d0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b6:	f7fe fc03 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 80040ba:	61b8      	str	r0, [r7, #24]
        break;
 80040bc:	e008      	b.n	80040d0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c2:	61bb      	str	r3, [r7, #24]
        break;
 80040c4:	e004      	b.n	80040d0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	77bb      	strb	r3, [r7, #30]
        break;
 80040ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8086 	beq.w	80041e4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	005a      	lsls	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	441a      	add	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d916      	bls.n	8004124 <UART_SetConfig+0x2d0>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d212      	bcs.n	8004124 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f023 030f 	bic.w	r3, r3, #15
 8004106:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	b29b      	uxth	r3, r3
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	b29a      	uxth	r2, r3
 8004114:	89fb      	ldrh	r3, [r7, #14]
 8004116:	4313      	orrs	r3, r2
 8004118:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	89fa      	ldrh	r2, [r7, #14]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	e05f      	b.n	80041e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	77bb      	strb	r3, [r7, #30]
 8004128:	e05c      	b.n	80041e4 <UART_SetConfig+0x390>
 800412a:	bf00      	nop
 800412c:	efff69f3 	.word	0xefff69f3
 8004130:	40013800 	.word	0x40013800
 8004134:	40021000 	.word	0x40021000
 8004138:	40004400 	.word	0x40004400
 800413c:	40004800 	.word	0x40004800
 8004140:	40004c00 	.word	0x40004c00
 8004144:	40005000 	.word	0x40005000
 8004148:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800414c:	7ffb      	ldrb	r3, [r7, #31]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d827      	bhi.n	80041a2 <UART_SetConfig+0x34e>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x304>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800417d 	.word	0x0800417d
 800415c:	08004185 	.word	0x08004185
 8004160:	0800418d 	.word	0x0800418d
 8004164:	080041a3 	.word	0x080041a3
 8004168:	08004193 	.word	0x08004193
 800416c:	080041a3 	.word	0x080041a3
 8004170:	080041a3 	.word	0x080041a3
 8004174:	080041a3 	.word	0x080041a3
 8004178:	0800419b 	.word	0x0800419b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fe fc16 	bl	80029ac <HAL_RCC_GetPCLK1Freq>
 8004180:	61b8      	str	r0, [r7, #24]
        break;
 8004182:	e013      	b.n	80041ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7fe fc34 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8004188:	61b8      	str	r0, [r7, #24]
        break;
 800418a:	e00f      	b.n	80041ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <UART_SetConfig+0x3a8>)
 800418e:	61bb      	str	r3, [r7, #24]
        break;
 8004190:	e00c      	b.n	80041ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004192:	f7fe fb95 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8004196:	61b8      	str	r0, [r7, #24]
        break;
 8004198:	e008      	b.n	80041ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419e:	61bb      	str	r3, [r7, #24]
        break;
 80041a0:	e004      	b.n	80041ac <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	77bb      	strb	r3, [r7, #30]
        break;
 80041aa:	bf00      	nop
    }

    if (pclk != 0U)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d018      	beq.n	80041e4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	085a      	lsrs	r2, r3, #1
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	441a      	add	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d908      	bls.n	80041e0 <UART_SetConfig+0x38c>
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d204      	bcs.n	80041e0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	e001      	b.n	80041e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	007a1200 	.word	0x007a1200

08004200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01a      	beq.n	8004316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fe:	d10a      	bne.n	8004316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af02      	add	r7, sp, #8
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004354:	f7fc ff6a 	bl	800122c <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d10e      	bne.n	8004386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f82d 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e023      	b.n	80043ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d10e      	bne.n	80043b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f817 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e00d      	b.n	80043ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e6:	e05e      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d05a      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f0:	f7fc ff1c 	bl	800122c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <UART_WaitOnFlagUntilTimeout+0x30>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d11b      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004414:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e043      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02c      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d124      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004464:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004474:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e00f      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d091      	beq.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <__errno>:
 80044d0:	4b01      	ldr	r3, [pc, #4]	; (80044d8 <__errno+0x8>)
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000014 	.word	0x20000014

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4d0d      	ldr	r5, [pc, #52]	; (8004514 <__libc_init_array+0x38>)
 80044e0:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e2:	1b64      	subs	r4, r4, r5
 80044e4:	10a4      	asrs	r4, r4, #2
 80044e6:	2600      	movs	r6, #0
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	4d0b      	ldr	r5, [pc, #44]	; (800451c <__libc_init_array+0x40>)
 80044ee:	4c0c      	ldr	r4, [pc, #48]	; (8004520 <__libc_init_array+0x44>)
 80044f0:	f001 f948 	bl	8005784 <_init>
 80044f4:	1b64      	subs	r4, r4, r5
 80044f6:	10a4      	asrs	r4, r4, #2
 80044f8:	2600      	movs	r6, #0
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	080059d0 	.word	0x080059d0
 8004518:	080059d0 	.word	0x080059d0
 800451c:	080059d0 	.word	0x080059d0
 8004520:	080059d4 	.word	0x080059d4

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <iprintf>:
 8004534:	b40f      	push	{r0, r1, r2, r3}
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <iprintf+0x2c>)
 8004538:	b513      	push	{r0, r1, r4, lr}
 800453a:	681c      	ldr	r4, [r3, #0]
 800453c:	b124      	cbz	r4, 8004548 <iprintf+0x14>
 800453e:	69a3      	ldr	r3, [r4, #24]
 8004540:	b913      	cbnz	r3, 8004548 <iprintf+0x14>
 8004542:	4620      	mov	r0, r4
 8004544:	f000 f886 	bl	8004654 <__sinit>
 8004548:	ab05      	add	r3, sp, #20
 800454a:	9a04      	ldr	r2, [sp, #16]
 800454c:	68a1      	ldr	r1, [r4, #8]
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	4620      	mov	r0, r4
 8004552:	f000 faff 	bl	8004b54 <_vfiprintf_r>
 8004556:	b002      	add	sp, #8
 8004558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800455c:	b004      	add	sp, #16
 800455e:	4770      	bx	lr
 8004560:	20000014 	.word	0x20000014

08004564 <siprintf>:
 8004564:	b40e      	push	{r1, r2, r3}
 8004566:	b500      	push	{lr}
 8004568:	b09c      	sub	sp, #112	; 0x70
 800456a:	ab1d      	add	r3, sp, #116	; 0x74
 800456c:	9002      	str	r0, [sp, #8]
 800456e:	9006      	str	r0, [sp, #24]
 8004570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004574:	4809      	ldr	r0, [pc, #36]	; (800459c <siprintf+0x38>)
 8004576:	9107      	str	r1, [sp, #28]
 8004578:	9104      	str	r1, [sp, #16]
 800457a:	4909      	ldr	r1, [pc, #36]	; (80045a0 <siprintf+0x3c>)
 800457c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004580:	9105      	str	r1, [sp, #20]
 8004582:	6800      	ldr	r0, [r0, #0]
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	a902      	add	r1, sp, #8
 8004588:	f000 f9ba 	bl	8004900 <_svfiprintf_r>
 800458c:	9b02      	ldr	r3, [sp, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	b01c      	add	sp, #112	; 0x70
 8004594:	f85d eb04 	ldr.w	lr, [sp], #4
 8004598:	b003      	add	sp, #12
 800459a:	4770      	bx	lr
 800459c:	20000014 	.word	0x20000014
 80045a0:	ffff0208 	.word	0xffff0208

080045a4 <std>:
 80045a4:	2300      	movs	r3, #0
 80045a6:	b510      	push	{r4, lr}
 80045a8:	4604      	mov	r4, r0
 80045aa:	e9c0 3300 	strd	r3, r3, [r0]
 80045ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045b2:	6083      	str	r3, [r0, #8]
 80045b4:	8181      	strh	r1, [r0, #12]
 80045b6:	6643      	str	r3, [r0, #100]	; 0x64
 80045b8:	81c2      	strh	r2, [r0, #14]
 80045ba:	6183      	str	r3, [r0, #24]
 80045bc:	4619      	mov	r1, r3
 80045be:	2208      	movs	r2, #8
 80045c0:	305c      	adds	r0, #92	; 0x5c
 80045c2:	f7ff ffaf 	bl	8004524 <memset>
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <std+0x38>)
 80045c8:	6263      	str	r3, [r4, #36]	; 0x24
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <std+0x3c>)
 80045cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <std+0x40>)
 80045d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <std+0x44>)
 80045d4:	6224      	str	r4, [r4, #32]
 80045d6:	6323      	str	r3, [r4, #48]	; 0x30
 80045d8:	bd10      	pop	{r4, pc}
 80045da:	bf00      	nop
 80045dc:	080050fd 	.word	0x080050fd
 80045e0:	0800511f 	.word	0x0800511f
 80045e4:	08005157 	.word	0x08005157
 80045e8:	0800517b 	.word	0x0800517b

080045ec <_cleanup_r>:
 80045ec:	4901      	ldr	r1, [pc, #4]	; (80045f4 <_cleanup_r+0x8>)
 80045ee:	f000 b8af 	b.w	8004750 <_fwalk_reent>
 80045f2:	bf00      	nop
 80045f4:	08005455 	.word	0x08005455

080045f8 <__sfmoreglue>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	1e4a      	subs	r2, r1, #1
 80045fc:	2568      	movs	r5, #104	; 0x68
 80045fe:	4355      	muls	r5, r2
 8004600:	460e      	mov	r6, r1
 8004602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004606:	f000 f8c5 	bl	8004794 <_malloc_r>
 800460a:	4604      	mov	r4, r0
 800460c:	b140      	cbz	r0, 8004620 <__sfmoreglue+0x28>
 800460e:	2100      	movs	r1, #0
 8004610:	e9c0 1600 	strd	r1, r6, [r0]
 8004614:	300c      	adds	r0, #12
 8004616:	60a0      	str	r0, [r4, #8]
 8004618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800461c:	f7ff ff82 	bl	8004524 <memset>
 8004620:	4620      	mov	r0, r4
 8004622:	bd70      	pop	{r4, r5, r6, pc}

08004624 <__sfp_lock_acquire>:
 8004624:	4801      	ldr	r0, [pc, #4]	; (800462c <__sfp_lock_acquire+0x8>)
 8004626:	f000 b8b3 	b.w	8004790 <__retarget_lock_acquire_recursive>
 800462a:	bf00      	nop
 800462c:	200011a4 	.word	0x200011a4

08004630 <__sfp_lock_release>:
 8004630:	4801      	ldr	r0, [pc, #4]	; (8004638 <__sfp_lock_release+0x8>)
 8004632:	f000 b8ae 	b.w	8004792 <__retarget_lock_release_recursive>
 8004636:	bf00      	nop
 8004638:	200011a4 	.word	0x200011a4

0800463c <__sinit_lock_acquire>:
 800463c:	4801      	ldr	r0, [pc, #4]	; (8004644 <__sinit_lock_acquire+0x8>)
 800463e:	f000 b8a7 	b.w	8004790 <__retarget_lock_acquire_recursive>
 8004642:	bf00      	nop
 8004644:	2000119f 	.word	0x2000119f

08004648 <__sinit_lock_release>:
 8004648:	4801      	ldr	r0, [pc, #4]	; (8004650 <__sinit_lock_release+0x8>)
 800464a:	f000 b8a2 	b.w	8004792 <__retarget_lock_release_recursive>
 800464e:	bf00      	nop
 8004650:	2000119f 	.word	0x2000119f

08004654 <__sinit>:
 8004654:	b510      	push	{r4, lr}
 8004656:	4604      	mov	r4, r0
 8004658:	f7ff fff0 	bl	800463c <__sinit_lock_acquire>
 800465c:	69a3      	ldr	r3, [r4, #24]
 800465e:	b11b      	cbz	r3, 8004668 <__sinit+0x14>
 8004660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004664:	f7ff bff0 	b.w	8004648 <__sinit_lock_release>
 8004668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800466c:	6523      	str	r3, [r4, #80]	; 0x50
 800466e:	4b13      	ldr	r3, [pc, #76]	; (80046bc <__sinit+0x68>)
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <__sinit+0x6c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	62a2      	str	r2, [r4, #40]	; 0x28
 8004676:	42a3      	cmp	r3, r4
 8004678:	bf04      	itt	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	61a3      	streq	r3, [r4, #24]
 800467e:	4620      	mov	r0, r4
 8004680:	f000 f820 	bl	80046c4 <__sfp>
 8004684:	6060      	str	r0, [r4, #4]
 8004686:	4620      	mov	r0, r4
 8004688:	f000 f81c 	bl	80046c4 <__sfp>
 800468c:	60a0      	str	r0, [r4, #8]
 800468e:	4620      	mov	r0, r4
 8004690:	f000 f818 	bl	80046c4 <__sfp>
 8004694:	2200      	movs	r2, #0
 8004696:	60e0      	str	r0, [r4, #12]
 8004698:	2104      	movs	r1, #4
 800469a:	6860      	ldr	r0, [r4, #4]
 800469c:	f7ff ff82 	bl	80045a4 <std>
 80046a0:	68a0      	ldr	r0, [r4, #8]
 80046a2:	2201      	movs	r2, #1
 80046a4:	2109      	movs	r1, #9
 80046a6:	f7ff ff7d 	bl	80045a4 <std>
 80046aa:	68e0      	ldr	r0, [r4, #12]
 80046ac:	2202      	movs	r2, #2
 80046ae:	2112      	movs	r1, #18
 80046b0:	f7ff ff78 	bl	80045a4 <std>
 80046b4:	2301      	movs	r3, #1
 80046b6:	61a3      	str	r3, [r4, #24]
 80046b8:	e7d2      	b.n	8004660 <__sinit+0xc>
 80046ba:	bf00      	nop
 80046bc:	08005938 	.word	0x08005938
 80046c0:	080045ed 	.word	0x080045ed

080046c4 <__sfp>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	4607      	mov	r7, r0
 80046c8:	f7ff ffac 	bl	8004624 <__sfp_lock_acquire>
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <__sfp+0x84>)
 80046ce:	681e      	ldr	r6, [r3, #0]
 80046d0:	69b3      	ldr	r3, [r6, #24]
 80046d2:	b913      	cbnz	r3, 80046da <__sfp+0x16>
 80046d4:	4630      	mov	r0, r6
 80046d6:	f7ff ffbd 	bl	8004654 <__sinit>
 80046da:	3648      	adds	r6, #72	; 0x48
 80046dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	d503      	bpl.n	80046ec <__sfp+0x28>
 80046e4:	6833      	ldr	r3, [r6, #0]
 80046e6:	b30b      	cbz	r3, 800472c <__sfp+0x68>
 80046e8:	6836      	ldr	r6, [r6, #0]
 80046ea:	e7f7      	b.n	80046dc <__sfp+0x18>
 80046ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046f0:	b9d5      	cbnz	r5, 8004728 <__sfp+0x64>
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <__sfp+0x88>)
 80046f4:	60e3      	str	r3, [r4, #12]
 80046f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046fa:	6665      	str	r5, [r4, #100]	; 0x64
 80046fc:	f000 f847 	bl	800478e <__retarget_lock_init_recursive>
 8004700:	f7ff ff96 	bl	8004630 <__sfp_lock_release>
 8004704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800470c:	6025      	str	r5, [r4, #0]
 800470e:	61a5      	str	r5, [r4, #24]
 8004710:	2208      	movs	r2, #8
 8004712:	4629      	mov	r1, r5
 8004714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004718:	f7ff ff04 	bl	8004524 <memset>
 800471c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004724:	4620      	mov	r0, r4
 8004726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004728:	3468      	adds	r4, #104	; 0x68
 800472a:	e7d9      	b.n	80046e0 <__sfp+0x1c>
 800472c:	2104      	movs	r1, #4
 800472e:	4638      	mov	r0, r7
 8004730:	f7ff ff62 	bl	80045f8 <__sfmoreglue>
 8004734:	4604      	mov	r4, r0
 8004736:	6030      	str	r0, [r6, #0]
 8004738:	2800      	cmp	r0, #0
 800473a:	d1d5      	bne.n	80046e8 <__sfp+0x24>
 800473c:	f7ff ff78 	bl	8004630 <__sfp_lock_release>
 8004740:	230c      	movs	r3, #12
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	e7ee      	b.n	8004724 <__sfp+0x60>
 8004746:	bf00      	nop
 8004748:	08005938 	.word	0x08005938
 800474c:	ffff0001 	.word	0xffff0001

08004750 <_fwalk_reent>:
 8004750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004754:	4606      	mov	r6, r0
 8004756:	4688      	mov	r8, r1
 8004758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800475c:	2700      	movs	r7, #0
 800475e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004762:	f1b9 0901 	subs.w	r9, r9, #1
 8004766:	d505      	bpl.n	8004774 <_fwalk_reent+0x24>
 8004768:	6824      	ldr	r4, [r4, #0]
 800476a:	2c00      	cmp	r4, #0
 800476c:	d1f7      	bne.n	800475e <_fwalk_reent+0xe>
 800476e:	4638      	mov	r0, r7
 8004770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004774:	89ab      	ldrh	r3, [r5, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d907      	bls.n	800478a <_fwalk_reent+0x3a>
 800477a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800477e:	3301      	adds	r3, #1
 8004780:	d003      	beq.n	800478a <_fwalk_reent+0x3a>
 8004782:	4629      	mov	r1, r5
 8004784:	4630      	mov	r0, r6
 8004786:	47c0      	blx	r8
 8004788:	4307      	orrs	r7, r0
 800478a:	3568      	adds	r5, #104	; 0x68
 800478c:	e7e9      	b.n	8004762 <_fwalk_reent+0x12>

0800478e <__retarget_lock_init_recursive>:
 800478e:	4770      	bx	lr

08004790 <__retarget_lock_acquire_recursive>:
 8004790:	4770      	bx	lr

08004792 <__retarget_lock_release_recursive>:
 8004792:	4770      	bx	lr

08004794 <_malloc_r>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	1ccd      	adds	r5, r1, #3
 8004798:	f025 0503 	bic.w	r5, r5, #3
 800479c:	3508      	adds	r5, #8
 800479e:	2d0c      	cmp	r5, #12
 80047a0:	bf38      	it	cc
 80047a2:	250c      	movcc	r5, #12
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	4606      	mov	r6, r0
 80047a8:	db01      	blt.n	80047ae <_malloc_r+0x1a>
 80047aa:	42a9      	cmp	r1, r5
 80047ac:	d903      	bls.n	80047b6 <_malloc_r+0x22>
 80047ae:	230c      	movs	r3, #12
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	2000      	movs	r0, #0
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b6:	f000 ff27 	bl	8005608 <__malloc_lock>
 80047ba:	4921      	ldr	r1, [pc, #132]	; (8004840 <_malloc_r+0xac>)
 80047bc:	680a      	ldr	r2, [r1, #0]
 80047be:	4614      	mov	r4, r2
 80047c0:	b99c      	cbnz	r4, 80047ea <_malloc_r+0x56>
 80047c2:	4f20      	ldr	r7, [pc, #128]	; (8004844 <_malloc_r+0xb0>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b923      	cbnz	r3, 80047d2 <_malloc_r+0x3e>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4630      	mov	r0, r6
 80047cc:	f000 fc86 	bl	80050dc <_sbrk_r>
 80047d0:	6038      	str	r0, [r7, #0]
 80047d2:	4629      	mov	r1, r5
 80047d4:	4630      	mov	r0, r6
 80047d6:	f000 fc81 	bl	80050dc <_sbrk_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d123      	bne.n	8004826 <_malloc_r+0x92>
 80047de:	230c      	movs	r3, #12
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 ff16 	bl	8005614 <__malloc_unlock>
 80047e8:	e7e3      	b.n	80047b2 <_malloc_r+0x1e>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	1b5b      	subs	r3, r3, r5
 80047ee:	d417      	bmi.n	8004820 <_malloc_r+0x8c>
 80047f0:	2b0b      	cmp	r3, #11
 80047f2:	d903      	bls.n	80047fc <_malloc_r+0x68>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	441c      	add	r4, r3
 80047f8:	6025      	str	r5, [r4, #0]
 80047fa:	e004      	b.n	8004806 <_malloc_r+0x72>
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	42a2      	cmp	r2, r4
 8004800:	bf0c      	ite	eq
 8004802:	600b      	streq	r3, [r1, #0]
 8004804:	6053      	strne	r3, [r2, #4]
 8004806:	4630      	mov	r0, r6
 8004808:	f000 ff04 	bl	8005614 <__malloc_unlock>
 800480c:	f104 000b 	add.w	r0, r4, #11
 8004810:	1d23      	adds	r3, r4, #4
 8004812:	f020 0007 	bic.w	r0, r0, #7
 8004816:	1ac2      	subs	r2, r0, r3
 8004818:	d0cc      	beq.n	80047b4 <_malloc_r+0x20>
 800481a:	1a1b      	subs	r3, r3, r0
 800481c:	50a3      	str	r3, [r4, r2]
 800481e:	e7c9      	b.n	80047b4 <_malloc_r+0x20>
 8004820:	4622      	mov	r2, r4
 8004822:	6864      	ldr	r4, [r4, #4]
 8004824:	e7cc      	b.n	80047c0 <_malloc_r+0x2c>
 8004826:	1cc4      	adds	r4, r0, #3
 8004828:	f024 0403 	bic.w	r4, r4, #3
 800482c:	42a0      	cmp	r0, r4
 800482e:	d0e3      	beq.n	80047f8 <_malloc_r+0x64>
 8004830:	1a21      	subs	r1, r4, r0
 8004832:	4630      	mov	r0, r6
 8004834:	f000 fc52 	bl	80050dc <_sbrk_r>
 8004838:	3001      	adds	r0, #1
 800483a:	d1dd      	bne.n	80047f8 <_malloc_r+0x64>
 800483c:	e7cf      	b.n	80047de <_malloc_r+0x4a>
 800483e:	bf00      	nop
 8004840:	2000009c 	.word	0x2000009c
 8004844:	200000a0 	.word	0x200000a0

08004848 <__ssputs_r>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	688e      	ldr	r6, [r1, #8]
 800484e:	429e      	cmp	r6, r3
 8004850:	4682      	mov	sl, r0
 8004852:	460c      	mov	r4, r1
 8004854:	4690      	mov	r8, r2
 8004856:	461f      	mov	r7, r3
 8004858:	d838      	bhi.n	80048cc <__ssputs_r+0x84>
 800485a:	898a      	ldrh	r2, [r1, #12]
 800485c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004860:	d032      	beq.n	80048c8 <__ssputs_r+0x80>
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	6909      	ldr	r1, [r1, #16]
 8004866:	eba5 0901 	sub.w	r9, r5, r1
 800486a:	6965      	ldr	r5, [r4, #20]
 800486c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004870:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004874:	3301      	adds	r3, #1
 8004876:	444b      	add	r3, r9
 8004878:	106d      	asrs	r5, r5, #1
 800487a:	429d      	cmp	r5, r3
 800487c:	bf38      	it	cc
 800487e:	461d      	movcc	r5, r3
 8004880:	0553      	lsls	r3, r2, #21
 8004882:	d531      	bpl.n	80048e8 <__ssputs_r+0xa0>
 8004884:	4629      	mov	r1, r5
 8004886:	f7ff ff85 	bl	8004794 <_malloc_r>
 800488a:	4606      	mov	r6, r0
 800488c:	b950      	cbnz	r0, 80048a4 <__ssputs_r+0x5c>
 800488e:	230c      	movs	r3, #12
 8004890:	f8ca 3000 	str.w	r3, [sl]
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a4:	6921      	ldr	r1, [r4, #16]
 80048a6:	464a      	mov	r2, r9
 80048a8:	f000 fe86 	bl	80055b8 <memcpy>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	6126      	str	r6, [r4, #16]
 80048ba:	6165      	str	r5, [r4, #20]
 80048bc:	444e      	add	r6, r9
 80048be:	eba5 0509 	sub.w	r5, r5, r9
 80048c2:	6026      	str	r6, [r4, #0]
 80048c4:	60a5      	str	r5, [r4, #8]
 80048c6:	463e      	mov	r6, r7
 80048c8:	42be      	cmp	r6, r7
 80048ca:	d900      	bls.n	80048ce <__ssputs_r+0x86>
 80048cc:	463e      	mov	r6, r7
 80048ce:	4632      	mov	r2, r6
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	4641      	mov	r1, r8
 80048d4:	f000 fe7e 	bl	80055d4 <memmove>
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	1b9b      	subs	r3, r3, r6
 80048de:	4432      	add	r2, r6
 80048e0:	60a3      	str	r3, [r4, #8]
 80048e2:	6022      	str	r2, [r4, #0]
 80048e4:	2000      	movs	r0, #0
 80048e6:	e7db      	b.n	80048a0 <__ssputs_r+0x58>
 80048e8:	462a      	mov	r2, r5
 80048ea:	f000 fee9 	bl	80056c0 <_realloc_r>
 80048ee:	4606      	mov	r6, r0
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d1e1      	bne.n	80048b8 <__ssputs_r+0x70>
 80048f4:	6921      	ldr	r1, [r4, #16]
 80048f6:	4650      	mov	r0, sl
 80048f8:	f000 fe92 	bl	8005620 <_free_r>
 80048fc:	e7c7      	b.n	800488e <__ssputs_r+0x46>
	...

08004900 <_svfiprintf_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	4698      	mov	r8, r3
 8004906:	898b      	ldrh	r3, [r1, #12]
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	b09d      	sub	sp, #116	; 0x74
 800490c:	4607      	mov	r7, r0
 800490e:	460d      	mov	r5, r1
 8004910:	4614      	mov	r4, r2
 8004912:	d50e      	bpl.n	8004932 <_svfiprintf_r+0x32>
 8004914:	690b      	ldr	r3, [r1, #16]
 8004916:	b963      	cbnz	r3, 8004932 <_svfiprintf_r+0x32>
 8004918:	2140      	movs	r1, #64	; 0x40
 800491a:	f7ff ff3b 	bl	8004794 <_malloc_r>
 800491e:	6028      	str	r0, [r5, #0]
 8004920:	6128      	str	r0, [r5, #16]
 8004922:	b920      	cbnz	r0, 800492e <_svfiprintf_r+0x2e>
 8004924:	230c      	movs	r3, #12
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	e0d1      	b.n	8004ad2 <_svfiprintf_r+0x1d2>
 800492e:	2340      	movs	r3, #64	; 0x40
 8004930:	616b      	str	r3, [r5, #20]
 8004932:	2300      	movs	r3, #0
 8004934:	9309      	str	r3, [sp, #36]	; 0x24
 8004936:	2320      	movs	r3, #32
 8004938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800493c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004940:	2330      	movs	r3, #48	; 0x30
 8004942:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004aec <_svfiprintf_r+0x1ec>
 8004946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800494a:	f04f 0901 	mov.w	r9, #1
 800494e:	4623      	mov	r3, r4
 8004950:	469a      	mov	sl, r3
 8004952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004956:	b10a      	cbz	r2, 800495c <_svfiprintf_r+0x5c>
 8004958:	2a25      	cmp	r2, #37	; 0x25
 800495a:	d1f9      	bne.n	8004950 <_svfiprintf_r+0x50>
 800495c:	ebba 0b04 	subs.w	fp, sl, r4
 8004960:	d00b      	beq.n	800497a <_svfiprintf_r+0x7a>
 8004962:	465b      	mov	r3, fp
 8004964:	4622      	mov	r2, r4
 8004966:	4629      	mov	r1, r5
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff ff6d 	bl	8004848 <__ssputs_r>
 800496e:	3001      	adds	r0, #1
 8004970:	f000 80aa 	beq.w	8004ac8 <_svfiprintf_r+0x1c8>
 8004974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004976:	445a      	add	r2, fp
 8004978:	9209      	str	r2, [sp, #36]	; 0x24
 800497a:	f89a 3000 	ldrb.w	r3, [sl]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80a2 	beq.w	8004ac8 <_svfiprintf_r+0x1c8>
 8004984:	2300      	movs	r3, #0
 8004986:	f04f 32ff 	mov.w	r2, #4294967295
 800498a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498e:	f10a 0a01 	add.w	sl, sl, #1
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800499a:	931a      	str	r3, [sp, #104]	; 0x68
 800499c:	4654      	mov	r4, sl
 800499e:	2205      	movs	r2, #5
 80049a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a4:	4851      	ldr	r0, [pc, #324]	; (8004aec <_svfiprintf_r+0x1ec>)
 80049a6:	f7fb fc1b 	bl	80001e0 <memchr>
 80049aa:	9a04      	ldr	r2, [sp, #16]
 80049ac:	b9d8      	cbnz	r0, 80049e6 <_svfiprintf_r+0xe6>
 80049ae:	06d0      	lsls	r0, r2, #27
 80049b0:	bf44      	itt	mi
 80049b2:	2320      	movmi	r3, #32
 80049b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b8:	0711      	lsls	r1, r2, #28
 80049ba:	bf44      	itt	mi
 80049bc:	232b      	movmi	r3, #43	; 0x2b
 80049be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c2:	f89a 3000 	ldrb.w	r3, [sl]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	d015      	beq.n	80049f6 <_svfiprintf_r+0xf6>
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	4654      	mov	r4, sl
 80049ce:	2000      	movs	r0, #0
 80049d0:	f04f 0c0a 	mov.w	ip, #10
 80049d4:	4621      	mov	r1, r4
 80049d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049da:	3b30      	subs	r3, #48	; 0x30
 80049dc:	2b09      	cmp	r3, #9
 80049de:	d94e      	bls.n	8004a7e <_svfiprintf_r+0x17e>
 80049e0:	b1b0      	cbz	r0, 8004a10 <_svfiprintf_r+0x110>
 80049e2:	9207      	str	r2, [sp, #28]
 80049e4:	e014      	b.n	8004a10 <_svfiprintf_r+0x110>
 80049e6:	eba0 0308 	sub.w	r3, r0, r8
 80049ea:	fa09 f303 	lsl.w	r3, r9, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	46a2      	mov	sl, r4
 80049f4:	e7d2      	b.n	800499c <_svfiprintf_r+0x9c>
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	1d19      	adds	r1, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	9103      	str	r1, [sp, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfbb      	ittet	lt
 8004a02:	425b      	neglt	r3, r3
 8004a04:	f042 0202 	orrlt.w	r2, r2, #2
 8004a08:	9307      	strge	r3, [sp, #28]
 8004a0a:	9307      	strlt	r3, [sp, #28]
 8004a0c:	bfb8      	it	lt
 8004a0e:	9204      	strlt	r2, [sp, #16]
 8004a10:	7823      	ldrb	r3, [r4, #0]
 8004a12:	2b2e      	cmp	r3, #46	; 0x2e
 8004a14:	d10c      	bne.n	8004a30 <_svfiprintf_r+0x130>
 8004a16:	7863      	ldrb	r3, [r4, #1]
 8004a18:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1a:	d135      	bne.n	8004a88 <_svfiprintf_r+0x188>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	9203      	str	r2, [sp, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bfb8      	it	lt
 8004a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a2c:	3402      	adds	r4, #2
 8004a2e:	9305      	str	r3, [sp, #20]
 8004a30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004afc <_svfiprintf_r+0x1fc>
 8004a34:	7821      	ldrb	r1, [r4, #0]
 8004a36:	2203      	movs	r2, #3
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f7fb fbd1 	bl	80001e0 <memchr>
 8004a3e:	b140      	cbz	r0, 8004a52 <_svfiprintf_r+0x152>
 8004a40:	2340      	movs	r3, #64	; 0x40
 8004a42:	eba0 000a 	sub.w	r0, r0, sl
 8004a46:	fa03 f000 	lsl.w	r0, r3, r0
 8004a4a:	9b04      	ldr	r3, [sp, #16]
 8004a4c:	4303      	orrs	r3, r0
 8004a4e:	3401      	adds	r4, #1
 8004a50:	9304      	str	r3, [sp, #16]
 8004a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a56:	4826      	ldr	r0, [pc, #152]	; (8004af0 <_svfiprintf_r+0x1f0>)
 8004a58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a5c:	2206      	movs	r2, #6
 8004a5e:	f7fb fbbf 	bl	80001e0 <memchr>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d038      	beq.n	8004ad8 <_svfiprintf_r+0x1d8>
 8004a66:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <_svfiprintf_r+0x1f4>)
 8004a68:	bb1b      	cbnz	r3, 8004ab2 <_svfiprintf_r+0x1b2>
 8004a6a:	9b03      	ldr	r3, [sp, #12]
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	f023 0307 	bic.w	r3, r3, #7
 8004a72:	3308      	adds	r3, #8
 8004a74:	9303      	str	r3, [sp, #12]
 8004a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a78:	4433      	add	r3, r6
 8004a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7c:	e767      	b.n	800494e <_svfiprintf_r+0x4e>
 8004a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a82:	460c      	mov	r4, r1
 8004a84:	2001      	movs	r0, #1
 8004a86:	e7a5      	b.n	80049d4 <_svfiprintf_r+0xd4>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	3401      	adds	r4, #1
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	f04f 0c0a 	mov.w	ip, #10
 8004a94:	4620      	mov	r0, r4
 8004a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a9a:	3a30      	subs	r2, #48	; 0x30
 8004a9c:	2a09      	cmp	r2, #9
 8004a9e:	d903      	bls.n	8004aa8 <_svfiprintf_r+0x1a8>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0c5      	beq.n	8004a30 <_svfiprintf_r+0x130>
 8004aa4:	9105      	str	r1, [sp, #20]
 8004aa6:	e7c3      	b.n	8004a30 <_svfiprintf_r+0x130>
 8004aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aac:	4604      	mov	r4, r0
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e7f0      	b.n	8004a94 <_svfiprintf_r+0x194>
 8004ab2:	ab03      	add	r3, sp, #12
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	462a      	mov	r2, r5
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <_svfiprintf_r+0x1f8>)
 8004aba:	a904      	add	r1, sp, #16
 8004abc:	4638      	mov	r0, r7
 8004abe:	f3af 8000 	nop.w
 8004ac2:	1c42      	adds	r2, r0, #1
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	d1d6      	bne.n	8004a76 <_svfiprintf_r+0x176>
 8004ac8:	89ab      	ldrh	r3, [r5, #12]
 8004aca:	065b      	lsls	r3, r3, #25
 8004acc:	f53f af2c 	bmi.w	8004928 <_svfiprintf_r+0x28>
 8004ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad2:	b01d      	add	sp, #116	; 0x74
 8004ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad8:	ab03      	add	r3, sp, #12
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	462a      	mov	r2, r5
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <_svfiprintf_r+0x1f8>)
 8004ae0:	a904      	add	r1, sp, #16
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	f000 f9d4 	bl	8004e90 <_printf_i>
 8004ae8:	e7eb      	b.n	8004ac2 <_svfiprintf_r+0x1c2>
 8004aea:	bf00      	nop
 8004aec:	0800599c 	.word	0x0800599c
 8004af0:	080059a6 	.word	0x080059a6
 8004af4:	00000000 	.word	0x00000000
 8004af8:	08004849 	.word	0x08004849
 8004afc:	080059a2 	.word	0x080059a2

08004b00 <__sfputc_r>:
 8004b00:	6893      	ldr	r3, [r2, #8]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	b410      	push	{r4}
 8004b08:	6093      	str	r3, [r2, #8]
 8004b0a:	da08      	bge.n	8004b1e <__sfputc_r+0x1e>
 8004b0c:	6994      	ldr	r4, [r2, #24]
 8004b0e:	42a3      	cmp	r3, r4
 8004b10:	db01      	blt.n	8004b16 <__sfputc_r+0x16>
 8004b12:	290a      	cmp	r1, #10
 8004b14:	d103      	bne.n	8004b1e <__sfputc_r+0x1e>
 8004b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b1a:	f000 bb33 	b.w	8005184 <__swbuf_r>
 8004b1e:	6813      	ldr	r3, [r2, #0]
 8004b20:	1c58      	adds	r0, r3, #1
 8004b22:	6010      	str	r0, [r2, #0]
 8004b24:	7019      	strb	r1, [r3, #0]
 8004b26:	4608      	mov	r0, r1
 8004b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <__sfputs_r>:
 8004b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b30:	4606      	mov	r6, r0
 8004b32:	460f      	mov	r7, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	18d5      	adds	r5, r2, r3
 8004b38:	42ac      	cmp	r4, r5
 8004b3a:	d101      	bne.n	8004b40 <__sfputs_r+0x12>
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e007      	b.n	8004b50 <__sfputs_r+0x22>
 8004b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b44:	463a      	mov	r2, r7
 8004b46:	4630      	mov	r0, r6
 8004b48:	f7ff ffda 	bl	8004b00 <__sfputc_r>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d1f3      	bne.n	8004b38 <__sfputs_r+0xa>
 8004b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b54 <_vfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	460d      	mov	r5, r1
 8004b5a:	b09d      	sub	sp, #116	; 0x74
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	4698      	mov	r8, r3
 8004b60:	4606      	mov	r6, r0
 8004b62:	b118      	cbz	r0, 8004b6c <_vfiprintf_r+0x18>
 8004b64:	6983      	ldr	r3, [r0, #24]
 8004b66:	b90b      	cbnz	r3, 8004b6c <_vfiprintf_r+0x18>
 8004b68:	f7ff fd74 	bl	8004654 <__sinit>
 8004b6c:	4b89      	ldr	r3, [pc, #548]	; (8004d94 <_vfiprintf_r+0x240>)
 8004b6e:	429d      	cmp	r5, r3
 8004b70:	d11b      	bne.n	8004baa <_vfiprintf_r+0x56>
 8004b72:	6875      	ldr	r5, [r6, #4]
 8004b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b76:	07d9      	lsls	r1, r3, #31
 8004b78:	d405      	bmi.n	8004b86 <_vfiprintf_r+0x32>
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	059a      	lsls	r2, r3, #22
 8004b7e:	d402      	bmi.n	8004b86 <_vfiprintf_r+0x32>
 8004b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b82:	f7ff fe05 	bl	8004790 <__retarget_lock_acquire_recursive>
 8004b86:	89ab      	ldrh	r3, [r5, #12]
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	d501      	bpl.n	8004b90 <_vfiprintf_r+0x3c>
 8004b8c:	692b      	ldr	r3, [r5, #16]
 8004b8e:	b9eb      	cbnz	r3, 8004bcc <_vfiprintf_r+0x78>
 8004b90:	4629      	mov	r1, r5
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 fb5a 	bl	800524c <__swsetup_r>
 8004b98:	b1c0      	cbz	r0, 8004bcc <_vfiprintf_r+0x78>
 8004b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b9c:	07dc      	lsls	r4, r3, #31
 8004b9e:	d50e      	bpl.n	8004bbe <_vfiprintf_r+0x6a>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	b01d      	add	sp, #116	; 0x74
 8004ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004baa:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <_vfiprintf_r+0x244>)
 8004bac:	429d      	cmp	r5, r3
 8004bae:	d101      	bne.n	8004bb4 <_vfiprintf_r+0x60>
 8004bb0:	68b5      	ldr	r5, [r6, #8]
 8004bb2:	e7df      	b.n	8004b74 <_vfiprintf_r+0x20>
 8004bb4:	4b79      	ldr	r3, [pc, #484]	; (8004d9c <_vfiprintf_r+0x248>)
 8004bb6:	429d      	cmp	r5, r3
 8004bb8:	bf08      	it	eq
 8004bba:	68f5      	ldreq	r5, [r6, #12]
 8004bbc:	e7da      	b.n	8004b74 <_vfiprintf_r+0x20>
 8004bbe:	89ab      	ldrh	r3, [r5, #12]
 8004bc0:	0598      	lsls	r0, r3, #22
 8004bc2:	d4ed      	bmi.n	8004ba0 <_vfiprintf_r+0x4c>
 8004bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bc6:	f7ff fde4 	bl	8004792 <__retarget_lock_release_recursive>
 8004bca:	e7e9      	b.n	8004ba0 <_vfiprintf_r+0x4c>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bda:	2330      	movs	r3, #48	; 0x30
 8004bdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004da0 <_vfiprintf_r+0x24c>
 8004be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004be4:	f04f 0901 	mov.w	r9, #1
 8004be8:	4623      	mov	r3, r4
 8004bea:	469a      	mov	sl, r3
 8004bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_vfiprintf_r+0xa2>
 8004bf2:	2a25      	cmp	r2, #37	; 0x25
 8004bf4:	d1f9      	bne.n	8004bea <_vfiprintf_r+0x96>
 8004bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8004bfa:	d00b      	beq.n	8004c14 <_vfiprintf_r+0xc0>
 8004bfc:	465b      	mov	r3, fp
 8004bfe:	4622      	mov	r2, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7ff ff93 	bl	8004b2e <__sfputs_r>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f000 80aa 	beq.w	8004d62 <_vfiprintf_r+0x20e>
 8004c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c10:	445a      	add	r2, fp
 8004c12:	9209      	str	r2, [sp, #36]	; 0x24
 8004c14:	f89a 3000 	ldrb.w	r3, [sl]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80a2 	beq.w	8004d62 <_vfiprintf_r+0x20e>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f04f 32ff 	mov.w	r2, #4294967295
 8004c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c28:	f10a 0a01 	add.w	sl, sl, #1
 8004c2c:	9304      	str	r3, [sp, #16]
 8004c2e:	9307      	str	r3, [sp, #28]
 8004c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c34:	931a      	str	r3, [sp, #104]	; 0x68
 8004c36:	4654      	mov	r4, sl
 8004c38:	2205      	movs	r2, #5
 8004c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c3e:	4858      	ldr	r0, [pc, #352]	; (8004da0 <_vfiprintf_r+0x24c>)
 8004c40:	f7fb face 	bl	80001e0 <memchr>
 8004c44:	9a04      	ldr	r2, [sp, #16]
 8004c46:	b9d8      	cbnz	r0, 8004c80 <_vfiprintf_r+0x12c>
 8004c48:	06d1      	lsls	r1, r2, #27
 8004c4a:	bf44      	itt	mi
 8004c4c:	2320      	movmi	r3, #32
 8004c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c52:	0713      	lsls	r3, r2, #28
 8004c54:	bf44      	itt	mi
 8004c56:	232b      	movmi	r3, #43	; 0x2b
 8004c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c60:	2b2a      	cmp	r3, #42	; 0x2a
 8004c62:	d015      	beq.n	8004c90 <_vfiprintf_r+0x13c>
 8004c64:	9a07      	ldr	r2, [sp, #28]
 8004c66:	4654      	mov	r4, sl
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f04f 0c0a 	mov.w	ip, #10
 8004c6e:	4621      	mov	r1, r4
 8004c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c74:	3b30      	subs	r3, #48	; 0x30
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	d94e      	bls.n	8004d18 <_vfiprintf_r+0x1c4>
 8004c7a:	b1b0      	cbz	r0, 8004caa <_vfiprintf_r+0x156>
 8004c7c:	9207      	str	r2, [sp, #28]
 8004c7e:	e014      	b.n	8004caa <_vfiprintf_r+0x156>
 8004c80:	eba0 0308 	sub.w	r3, r0, r8
 8004c84:	fa09 f303 	lsl.w	r3, r9, r3
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	46a2      	mov	sl, r4
 8004c8e:	e7d2      	b.n	8004c36 <_vfiprintf_r+0xe2>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	1d19      	adds	r1, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9103      	str	r1, [sp, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bfbb      	ittet	lt
 8004c9c:	425b      	neglt	r3, r3
 8004c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8004ca2:	9307      	strge	r3, [sp, #28]
 8004ca4:	9307      	strlt	r3, [sp, #28]
 8004ca6:	bfb8      	it	lt
 8004ca8:	9204      	strlt	r2, [sp, #16]
 8004caa:	7823      	ldrb	r3, [r4, #0]
 8004cac:	2b2e      	cmp	r3, #46	; 0x2e
 8004cae:	d10c      	bne.n	8004cca <_vfiprintf_r+0x176>
 8004cb0:	7863      	ldrb	r3, [r4, #1]
 8004cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb4:	d135      	bne.n	8004d22 <_vfiprintf_r+0x1ce>
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	1d1a      	adds	r2, r3, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	9203      	str	r2, [sp, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfb8      	it	lt
 8004cc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cc6:	3402      	adds	r4, #2
 8004cc8:	9305      	str	r3, [sp, #20]
 8004cca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004db0 <_vfiprintf_r+0x25c>
 8004cce:	7821      	ldrb	r1, [r4, #0]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	4650      	mov	r0, sl
 8004cd4:	f7fb fa84 	bl	80001e0 <memchr>
 8004cd8:	b140      	cbz	r0, 8004cec <_vfiprintf_r+0x198>
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	eba0 000a 	sub.w	r0, r0, sl
 8004ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ce4:	9b04      	ldr	r3, [sp, #16]
 8004ce6:	4303      	orrs	r3, r0
 8004ce8:	3401      	adds	r4, #1
 8004cea:	9304      	str	r3, [sp, #16]
 8004cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf0:	482c      	ldr	r0, [pc, #176]	; (8004da4 <_vfiprintf_r+0x250>)
 8004cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cf6:	2206      	movs	r2, #6
 8004cf8:	f7fb fa72 	bl	80001e0 <memchr>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d03f      	beq.n	8004d80 <_vfiprintf_r+0x22c>
 8004d00:	4b29      	ldr	r3, [pc, #164]	; (8004da8 <_vfiprintf_r+0x254>)
 8004d02:	bb1b      	cbnz	r3, 8004d4c <_vfiprintf_r+0x1f8>
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	3307      	adds	r3, #7
 8004d08:	f023 0307 	bic.w	r3, r3, #7
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	9303      	str	r3, [sp, #12]
 8004d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d12:	443b      	add	r3, r7
 8004d14:	9309      	str	r3, [sp, #36]	; 0x24
 8004d16:	e767      	b.n	8004be8 <_vfiprintf_r+0x94>
 8004d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	2001      	movs	r0, #1
 8004d20:	e7a5      	b.n	8004c6e <_vfiprintf_r+0x11a>
 8004d22:	2300      	movs	r3, #0
 8004d24:	3401      	adds	r4, #1
 8004d26:	9305      	str	r3, [sp, #20]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f04f 0c0a 	mov.w	ip, #10
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d34:	3a30      	subs	r2, #48	; 0x30
 8004d36:	2a09      	cmp	r2, #9
 8004d38:	d903      	bls.n	8004d42 <_vfiprintf_r+0x1ee>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c5      	beq.n	8004cca <_vfiprintf_r+0x176>
 8004d3e:	9105      	str	r1, [sp, #20]
 8004d40:	e7c3      	b.n	8004cca <_vfiprintf_r+0x176>
 8004d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d46:	4604      	mov	r4, r0
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e7f0      	b.n	8004d2e <_vfiprintf_r+0x1da>
 8004d4c:	ab03      	add	r3, sp, #12
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	462a      	mov	r2, r5
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <_vfiprintf_r+0x258>)
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	4630      	mov	r0, r6
 8004d58:	f3af 8000 	nop.w
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	1c78      	adds	r0, r7, #1
 8004d60:	d1d6      	bne.n	8004d10 <_vfiprintf_r+0x1bc>
 8004d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d64:	07d9      	lsls	r1, r3, #31
 8004d66:	d405      	bmi.n	8004d74 <_vfiprintf_r+0x220>
 8004d68:	89ab      	ldrh	r3, [r5, #12]
 8004d6a:	059a      	lsls	r2, r3, #22
 8004d6c:	d402      	bmi.n	8004d74 <_vfiprintf_r+0x220>
 8004d6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d70:	f7ff fd0f 	bl	8004792 <__retarget_lock_release_recursive>
 8004d74:	89ab      	ldrh	r3, [r5, #12]
 8004d76:	065b      	lsls	r3, r3, #25
 8004d78:	f53f af12 	bmi.w	8004ba0 <_vfiprintf_r+0x4c>
 8004d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d7e:	e711      	b.n	8004ba4 <_vfiprintf_r+0x50>
 8004d80:	ab03      	add	r3, sp, #12
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	462a      	mov	r2, r5
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <_vfiprintf_r+0x258>)
 8004d88:	a904      	add	r1, sp, #16
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f000 f880 	bl	8004e90 <_printf_i>
 8004d90:	e7e4      	b.n	8004d5c <_vfiprintf_r+0x208>
 8004d92:	bf00      	nop
 8004d94:	0800595c 	.word	0x0800595c
 8004d98:	0800597c 	.word	0x0800597c
 8004d9c:	0800593c 	.word	0x0800593c
 8004da0:	0800599c 	.word	0x0800599c
 8004da4:	080059a6 	.word	0x080059a6
 8004da8:	00000000 	.word	0x00000000
 8004dac:	08004b2f 	.word	0x08004b2f
 8004db0:	080059a2 	.word	0x080059a2

08004db4 <_printf_common>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	4616      	mov	r6, r2
 8004dba:	4699      	mov	r9, r3
 8004dbc:	688a      	ldr	r2, [r1, #8]
 8004dbe:	690b      	ldr	r3, [r1, #16]
 8004dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfb8      	it	lt
 8004dc8:	4613      	movlt	r3, r2
 8004dca:	6033      	str	r3, [r6, #0]
 8004dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	b10a      	cbz	r2, 8004dda <_printf_common+0x26>
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	0699      	lsls	r1, r3, #26
 8004dde:	bf42      	ittt	mi
 8004de0:	6833      	ldrmi	r3, [r6, #0]
 8004de2:	3302      	addmi	r3, #2
 8004de4:	6033      	strmi	r3, [r6, #0]
 8004de6:	6825      	ldr	r5, [r4, #0]
 8004de8:	f015 0506 	ands.w	r5, r5, #6
 8004dec:	d106      	bne.n	8004dfc <_printf_common+0x48>
 8004dee:	f104 0a19 	add.w	sl, r4, #25
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	6832      	ldr	r2, [r6, #0]
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	dc26      	bgt.n	8004e4a <_printf_common+0x96>
 8004dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e00:	1e13      	subs	r3, r2, #0
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	bf18      	it	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	0692      	lsls	r2, r2, #26
 8004e0a:	d42b      	bmi.n	8004e64 <_printf_common+0xb0>
 8004e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e10:	4649      	mov	r1, r9
 8004e12:	4638      	mov	r0, r7
 8004e14:	47c0      	blx	r8
 8004e16:	3001      	adds	r0, #1
 8004e18:	d01e      	beq.n	8004e58 <_printf_common+0xa4>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	68e5      	ldr	r5, [r4, #12]
 8004e1e:	6832      	ldr	r2, [r6, #0]
 8004e20:	f003 0306 	and.w	r3, r3, #6
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	bf08      	it	eq
 8004e28:	1aad      	subeq	r5, r5, r2
 8004e2a:	68a3      	ldr	r3, [r4, #8]
 8004e2c:	6922      	ldr	r2, [r4, #16]
 8004e2e:	bf0c      	ite	eq
 8004e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e34:	2500      	movne	r5, #0
 8004e36:	4293      	cmp	r3, r2
 8004e38:	bfc4      	itt	gt
 8004e3a:	1a9b      	subgt	r3, r3, r2
 8004e3c:	18ed      	addgt	r5, r5, r3
 8004e3e:	2600      	movs	r6, #0
 8004e40:	341a      	adds	r4, #26
 8004e42:	42b5      	cmp	r5, r6
 8004e44:	d11a      	bne.n	8004e7c <_printf_common+0xc8>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e008      	b.n	8004e5c <_printf_common+0xa8>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4652      	mov	r2, sl
 8004e4e:	4649      	mov	r1, r9
 8004e50:	4638      	mov	r0, r7
 8004e52:	47c0      	blx	r8
 8004e54:	3001      	adds	r0, #1
 8004e56:	d103      	bne.n	8004e60 <_printf_common+0xac>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	3501      	adds	r5, #1
 8004e62:	e7c6      	b.n	8004df2 <_printf_common+0x3e>
 8004e64:	18e1      	adds	r1, r4, r3
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	2030      	movs	r0, #48	; 0x30
 8004e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e6e:	4422      	add	r2, r4
 8004e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e78:	3302      	adds	r3, #2
 8004e7a:	e7c7      	b.n	8004e0c <_printf_common+0x58>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4649      	mov	r1, r9
 8004e82:	4638      	mov	r0, r7
 8004e84:	47c0      	blx	r8
 8004e86:	3001      	adds	r0, #1
 8004e88:	d0e6      	beq.n	8004e58 <_printf_common+0xa4>
 8004e8a:	3601      	adds	r6, #1
 8004e8c:	e7d9      	b.n	8004e42 <_printf_common+0x8e>
	...

08004e90 <_printf_i>:
 8004e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	460c      	mov	r4, r1
 8004e96:	4691      	mov	r9, r2
 8004e98:	7e27      	ldrb	r7, [r4, #24]
 8004e9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e9c:	2f78      	cmp	r7, #120	; 0x78
 8004e9e:	4680      	mov	r8, r0
 8004ea0:	469a      	mov	sl, r3
 8004ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea6:	d807      	bhi.n	8004eb8 <_printf_i+0x28>
 8004ea8:	2f62      	cmp	r7, #98	; 0x62
 8004eaa:	d80a      	bhi.n	8004ec2 <_printf_i+0x32>
 8004eac:	2f00      	cmp	r7, #0
 8004eae:	f000 80d8 	beq.w	8005062 <_printf_i+0x1d2>
 8004eb2:	2f58      	cmp	r7, #88	; 0x58
 8004eb4:	f000 80a3 	beq.w	8004ffe <_printf_i+0x16e>
 8004eb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ec0:	e03a      	b.n	8004f38 <_printf_i+0xa8>
 8004ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ec6:	2b15      	cmp	r3, #21
 8004ec8:	d8f6      	bhi.n	8004eb8 <_printf_i+0x28>
 8004eca:	a001      	add	r0, pc, #4	; (adr r0, 8004ed0 <_printf_i+0x40>)
 8004ecc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f3d 	.word	0x08004f3d
 8004ed8:	08004eb9 	.word	0x08004eb9
 8004edc:	08004eb9 	.word	0x08004eb9
 8004ee0:	08004eb9 	.word	0x08004eb9
 8004ee4:	08004eb9 	.word	0x08004eb9
 8004ee8:	08004f3d 	.word	0x08004f3d
 8004eec:	08004eb9 	.word	0x08004eb9
 8004ef0:	08004eb9 	.word	0x08004eb9
 8004ef4:	08004eb9 	.word	0x08004eb9
 8004ef8:	08004eb9 	.word	0x08004eb9
 8004efc:	08005049 	.word	0x08005049
 8004f00:	08004f6d 	.word	0x08004f6d
 8004f04:	0800502b 	.word	0x0800502b
 8004f08:	08004eb9 	.word	0x08004eb9
 8004f0c:	08004eb9 	.word	0x08004eb9
 8004f10:	0800506b 	.word	0x0800506b
 8004f14:	08004eb9 	.word	0x08004eb9
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	08004eb9 	.word	0x08004eb9
 8004f20:	08004eb9 	.word	0x08004eb9
 8004f24:	08005033 	.word	0x08005033
 8004f28:	680b      	ldr	r3, [r1, #0]
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	600a      	str	r2, [r1, #0]
 8004f30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0a3      	b.n	8005084 <_printf_i+0x1f4>
 8004f3c:	6825      	ldr	r5, [r4, #0]
 8004f3e:	6808      	ldr	r0, [r1, #0]
 8004f40:	062e      	lsls	r6, r5, #24
 8004f42:	f100 0304 	add.w	r3, r0, #4
 8004f46:	d50a      	bpl.n	8004f5e <_printf_i+0xce>
 8004f48:	6805      	ldr	r5, [r0, #0]
 8004f4a:	600b      	str	r3, [r1, #0]
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	da03      	bge.n	8004f58 <_printf_i+0xc8>
 8004f50:	232d      	movs	r3, #45	; 0x2d
 8004f52:	426d      	negs	r5, r5
 8004f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f58:	485e      	ldr	r0, [pc, #376]	; (80050d4 <_printf_i+0x244>)
 8004f5a:	230a      	movs	r3, #10
 8004f5c:	e019      	b.n	8004f92 <_printf_i+0x102>
 8004f5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f62:	6805      	ldr	r5, [r0, #0]
 8004f64:	600b      	str	r3, [r1, #0]
 8004f66:	bf18      	it	ne
 8004f68:	b22d      	sxthne	r5, r5
 8004f6a:	e7ef      	b.n	8004f4c <_printf_i+0xbc>
 8004f6c:	680b      	ldr	r3, [r1, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	1d18      	adds	r0, r3, #4
 8004f72:	6008      	str	r0, [r1, #0]
 8004f74:	0628      	lsls	r0, r5, #24
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0xec>
 8004f78:	681d      	ldr	r5, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <_printf_i+0xf2>
 8004f7c:	0669      	lsls	r1, r5, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0xe8>
 8004f80:	881d      	ldrh	r5, [r3, #0]
 8004f82:	4854      	ldr	r0, [pc, #336]	; (80050d4 <_printf_i+0x244>)
 8004f84:	2f6f      	cmp	r7, #111	; 0x6f
 8004f86:	bf0c      	ite	eq
 8004f88:	2308      	moveq	r3, #8
 8004f8a:	230a      	movne	r3, #10
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f92:	6866      	ldr	r6, [r4, #4]
 8004f94:	60a6      	str	r6, [r4, #8]
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	bfa2      	ittt	ge
 8004f9a:	6821      	ldrge	r1, [r4, #0]
 8004f9c:	f021 0104 	bicge.w	r1, r1, #4
 8004fa0:	6021      	strge	r1, [r4, #0]
 8004fa2:	b90d      	cbnz	r5, 8004fa8 <_printf_i+0x118>
 8004fa4:	2e00      	cmp	r6, #0
 8004fa6:	d04d      	beq.n	8005044 <_printf_i+0x1b4>
 8004fa8:	4616      	mov	r6, r2
 8004faa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fae:	fb03 5711 	mls	r7, r3, r1, r5
 8004fb2:	5dc7      	ldrb	r7, [r0, r7]
 8004fb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fb8:	462f      	mov	r7, r5
 8004fba:	42bb      	cmp	r3, r7
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	d9f4      	bls.n	8004faa <_printf_i+0x11a>
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d10b      	bne.n	8004fdc <_printf_i+0x14c>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	07df      	lsls	r7, r3, #31
 8004fc8:	d508      	bpl.n	8004fdc <_printf_i+0x14c>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	6861      	ldr	r1, [r4, #4]
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	bfde      	ittt	le
 8004fd2:	2330      	movle	r3, #48	; 0x30
 8004fd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fdc:	1b92      	subs	r2, r2, r6
 8004fde:	6122      	str	r2, [r4, #16]
 8004fe0:	f8cd a000 	str.w	sl, [sp]
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	aa03      	add	r2, sp, #12
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4640      	mov	r0, r8
 8004fec:	f7ff fee2 	bl	8004db4 <_printf_common>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d14c      	bne.n	800508e <_printf_i+0x1fe>
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	b004      	add	sp, #16
 8004ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffe:	4835      	ldr	r0, [pc, #212]	; (80050d4 <_printf_i+0x244>)
 8005000:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	680e      	ldr	r6, [r1, #0]
 8005008:	061f      	lsls	r7, r3, #24
 800500a:	f856 5b04 	ldr.w	r5, [r6], #4
 800500e:	600e      	str	r6, [r1, #0]
 8005010:	d514      	bpl.n	800503c <_printf_i+0x1ac>
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	bf44      	itt	mi
 8005016:	f043 0320 	orrmi.w	r3, r3, #32
 800501a:	6023      	strmi	r3, [r4, #0]
 800501c:	b91d      	cbnz	r5, 8005026 <_printf_i+0x196>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	f023 0320 	bic.w	r3, r3, #32
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	2310      	movs	r3, #16
 8005028:	e7b0      	b.n	8004f8c <_printf_i+0xfc>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	2378      	movs	r3, #120	; 0x78
 8005034:	4828      	ldr	r0, [pc, #160]	; (80050d8 <_printf_i+0x248>)
 8005036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800503a:	e7e3      	b.n	8005004 <_printf_i+0x174>
 800503c:	065e      	lsls	r6, r3, #25
 800503e:	bf48      	it	mi
 8005040:	b2ad      	uxthmi	r5, r5
 8005042:	e7e6      	b.n	8005012 <_printf_i+0x182>
 8005044:	4616      	mov	r6, r2
 8005046:	e7bb      	b.n	8004fc0 <_printf_i+0x130>
 8005048:	680b      	ldr	r3, [r1, #0]
 800504a:	6826      	ldr	r6, [r4, #0]
 800504c:	6960      	ldr	r0, [r4, #20]
 800504e:	1d1d      	adds	r5, r3, #4
 8005050:	600d      	str	r5, [r1, #0]
 8005052:	0635      	lsls	r5, r6, #24
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	d501      	bpl.n	800505c <_printf_i+0x1cc>
 8005058:	6018      	str	r0, [r3, #0]
 800505a:	e002      	b.n	8005062 <_printf_i+0x1d2>
 800505c:	0671      	lsls	r1, r6, #25
 800505e:	d5fb      	bpl.n	8005058 <_printf_i+0x1c8>
 8005060:	8018      	strh	r0, [r3, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	6123      	str	r3, [r4, #16]
 8005066:	4616      	mov	r6, r2
 8005068:	e7ba      	b.n	8004fe0 <_printf_i+0x150>
 800506a:	680b      	ldr	r3, [r1, #0]
 800506c:	1d1a      	adds	r2, r3, #4
 800506e:	600a      	str	r2, [r1, #0]
 8005070:	681e      	ldr	r6, [r3, #0]
 8005072:	6862      	ldr	r2, [r4, #4]
 8005074:	2100      	movs	r1, #0
 8005076:	4630      	mov	r0, r6
 8005078:	f7fb f8b2 	bl	80001e0 <memchr>
 800507c:	b108      	cbz	r0, 8005082 <_printf_i+0x1f2>
 800507e:	1b80      	subs	r0, r0, r6
 8005080:	6060      	str	r0, [r4, #4]
 8005082:	6863      	ldr	r3, [r4, #4]
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	2300      	movs	r3, #0
 8005088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508c:	e7a8      	b.n	8004fe0 <_printf_i+0x150>
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	4632      	mov	r2, r6
 8005092:	4649      	mov	r1, r9
 8005094:	4640      	mov	r0, r8
 8005096:	47d0      	blx	sl
 8005098:	3001      	adds	r0, #1
 800509a:	d0ab      	beq.n	8004ff4 <_printf_i+0x164>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	079b      	lsls	r3, r3, #30
 80050a0:	d413      	bmi.n	80050ca <_printf_i+0x23a>
 80050a2:	68e0      	ldr	r0, [r4, #12]
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	4298      	cmp	r0, r3
 80050a8:	bfb8      	it	lt
 80050aa:	4618      	movlt	r0, r3
 80050ac:	e7a4      	b.n	8004ff8 <_printf_i+0x168>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4632      	mov	r2, r6
 80050b2:	4649      	mov	r1, r9
 80050b4:	4640      	mov	r0, r8
 80050b6:	47d0      	blx	sl
 80050b8:	3001      	adds	r0, #1
 80050ba:	d09b      	beq.n	8004ff4 <_printf_i+0x164>
 80050bc:	3501      	adds	r5, #1
 80050be:	68e3      	ldr	r3, [r4, #12]
 80050c0:	9903      	ldr	r1, [sp, #12]
 80050c2:	1a5b      	subs	r3, r3, r1
 80050c4:	42ab      	cmp	r3, r5
 80050c6:	dcf2      	bgt.n	80050ae <_printf_i+0x21e>
 80050c8:	e7eb      	b.n	80050a2 <_printf_i+0x212>
 80050ca:	2500      	movs	r5, #0
 80050cc:	f104 0619 	add.w	r6, r4, #25
 80050d0:	e7f5      	b.n	80050be <_printf_i+0x22e>
 80050d2:	bf00      	nop
 80050d4:	080059ad 	.word	0x080059ad
 80050d8:	080059be 	.word	0x080059be

080050dc <_sbrk_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d06      	ldr	r5, [pc, #24]	; (80050f8 <_sbrk_r+0x1c>)
 80050e0:	2300      	movs	r3, #0
 80050e2:	4604      	mov	r4, r0
 80050e4:	4608      	mov	r0, r1
 80050e6:	602b      	str	r3, [r5, #0]
 80050e8:	f7fb ffd4 	bl	8001094 <_sbrk>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_sbrk_r+0x1a>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_sbrk_r+0x1a>
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	200011a8 	.word	0x200011a8

080050fc <__sread>:
 80050fc:	b510      	push	{r4, lr}
 80050fe:	460c      	mov	r4, r1
 8005100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005104:	f000 fb02 	bl	800570c <_read_r>
 8005108:	2800      	cmp	r0, #0
 800510a:	bfab      	itete	ge
 800510c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800510e:	89a3      	ldrhlt	r3, [r4, #12]
 8005110:	181b      	addge	r3, r3, r0
 8005112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005116:	bfac      	ite	ge
 8005118:	6563      	strge	r3, [r4, #84]	; 0x54
 800511a:	81a3      	strhlt	r3, [r4, #12]
 800511c:	bd10      	pop	{r4, pc}

0800511e <__swrite>:
 800511e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005122:	461f      	mov	r7, r3
 8005124:	898b      	ldrh	r3, [r1, #12]
 8005126:	05db      	lsls	r3, r3, #23
 8005128:	4605      	mov	r5, r0
 800512a:	460c      	mov	r4, r1
 800512c:	4616      	mov	r6, r2
 800512e:	d505      	bpl.n	800513c <__swrite+0x1e>
 8005130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005134:	2302      	movs	r3, #2
 8005136:	2200      	movs	r2, #0
 8005138:	f000 f9c8 	bl	80054cc <_lseek_r>
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005146:	81a3      	strh	r3, [r4, #12]
 8005148:	4632      	mov	r2, r6
 800514a:	463b      	mov	r3, r7
 800514c:	4628      	mov	r0, r5
 800514e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005152:	f000 b869 	b.w	8005228 <_write_r>

08005156 <__sseek>:
 8005156:	b510      	push	{r4, lr}
 8005158:	460c      	mov	r4, r1
 800515a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800515e:	f000 f9b5 	bl	80054cc <_lseek_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	bf15      	itete	ne
 8005168:	6560      	strne	r0, [r4, #84]	; 0x54
 800516a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800516e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005172:	81a3      	strheq	r3, [r4, #12]
 8005174:	bf18      	it	ne
 8005176:	81a3      	strhne	r3, [r4, #12]
 8005178:	bd10      	pop	{r4, pc}

0800517a <__sclose>:
 800517a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517e:	f000 b8d3 	b.w	8005328 <_close_r>
	...

08005184 <__swbuf_r>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	460e      	mov	r6, r1
 8005188:	4614      	mov	r4, r2
 800518a:	4605      	mov	r5, r0
 800518c:	b118      	cbz	r0, 8005196 <__swbuf_r+0x12>
 800518e:	6983      	ldr	r3, [r0, #24]
 8005190:	b90b      	cbnz	r3, 8005196 <__swbuf_r+0x12>
 8005192:	f7ff fa5f 	bl	8004654 <__sinit>
 8005196:	4b21      	ldr	r3, [pc, #132]	; (800521c <__swbuf_r+0x98>)
 8005198:	429c      	cmp	r4, r3
 800519a:	d12b      	bne.n	80051f4 <__swbuf_r+0x70>
 800519c:	686c      	ldr	r4, [r5, #4]
 800519e:	69a3      	ldr	r3, [r4, #24]
 80051a0:	60a3      	str	r3, [r4, #8]
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	071a      	lsls	r2, r3, #28
 80051a6:	d52f      	bpl.n	8005208 <__swbuf_r+0x84>
 80051a8:	6923      	ldr	r3, [r4, #16]
 80051aa:	b36b      	cbz	r3, 8005208 <__swbuf_r+0x84>
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	1ac0      	subs	r0, r0, r3
 80051b2:	6963      	ldr	r3, [r4, #20]
 80051b4:	b2f6      	uxtb	r6, r6
 80051b6:	4283      	cmp	r3, r0
 80051b8:	4637      	mov	r7, r6
 80051ba:	dc04      	bgt.n	80051c6 <__swbuf_r+0x42>
 80051bc:	4621      	mov	r1, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 f948 	bl	8005454 <_fflush_r>
 80051c4:	bb30      	cbnz	r0, 8005214 <__swbuf_r+0x90>
 80051c6:	68a3      	ldr	r3, [r4, #8]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	60a3      	str	r3, [r4, #8]
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	6022      	str	r2, [r4, #0]
 80051d2:	701e      	strb	r6, [r3, #0]
 80051d4:	6963      	ldr	r3, [r4, #20]
 80051d6:	3001      	adds	r0, #1
 80051d8:	4283      	cmp	r3, r0
 80051da:	d004      	beq.n	80051e6 <__swbuf_r+0x62>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	07db      	lsls	r3, r3, #31
 80051e0:	d506      	bpl.n	80051f0 <__swbuf_r+0x6c>
 80051e2:	2e0a      	cmp	r6, #10
 80051e4:	d104      	bne.n	80051f0 <__swbuf_r+0x6c>
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 f933 	bl	8005454 <_fflush_r>
 80051ee:	b988      	cbnz	r0, 8005214 <__swbuf_r+0x90>
 80051f0:	4638      	mov	r0, r7
 80051f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <__swbuf_r+0x9c>)
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d101      	bne.n	80051fe <__swbuf_r+0x7a>
 80051fa:	68ac      	ldr	r4, [r5, #8]
 80051fc:	e7cf      	b.n	800519e <__swbuf_r+0x1a>
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <__swbuf_r+0xa0>)
 8005200:	429c      	cmp	r4, r3
 8005202:	bf08      	it	eq
 8005204:	68ec      	ldreq	r4, [r5, #12]
 8005206:	e7ca      	b.n	800519e <__swbuf_r+0x1a>
 8005208:	4621      	mov	r1, r4
 800520a:	4628      	mov	r0, r5
 800520c:	f000 f81e 	bl	800524c <__swsetup_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	d0cb      	beq.n	80051ac <__swbuf_r+0x28>
 8005214:	f04f 37ff 	mov.w	r7, #4294967295
 8005218:	e7ea      	b.n	80051f0 <__swbuf_r+0x6c>
 800521a:	bf00      	nop
 800521c:	0800595c 	.word	0x0800595c
 8005220:	0800597c 	.word	0x0800597c
 8005224:	0800593c 	.word	0x0800593c

08005228 <_write_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	; (8005248 <_write_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fb fafc 	bl	8000834 <_write>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_write_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_write_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	200011a8 	.word	0x200011a8

0800524c <__swsetup_r>:
 800524c:	4b32      	ldr	r3, [pc, #200]	; (8005318 <__swsetup_r+0xcc>)
 800524e:	b570      	push	{r4, r5, r6, lr}
 8005250:	681d      	ldr	r5, [r3, #0]
 8005252:	4606      	mov	r6, r0
 8005254:	460c      	mov	r4, r1
 8005256:	b125      	cbz	r5, 8005262 <__swsetup_r+0x16>
 8005258:	69ab      	ldr	r3, [r5, #24]
 800525a:	b913      	cbnz	r3, 8005262 <__swsetup_r+0x16>
 800525c:	4628      	mov	r0, r5
 800525e:	f7ff f9f9 	bl	8004654 <__sinit>
 8005262:	4b2e      	ldr	r3, [pc, #184]	; (800531c <__swsetup_r+0xd0>)
 8005264:	429c      	cmp	r4, r3
 8005266:	d10f      	bne.n	8005288 <__swsetup_r+0x3c>
 8005268:	686c      	ldr	r4, [r5, #4]
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005270:	0719      	lsls	r1, r3, #28
 8005272:	d42c      	bmi.n	80052ce <__swsetup_r+0x82>
 8005274:	06dd      	lsls	r5, r3, #27
 8005276:	d411      	bmi.n	800529c <__swsetup_r+0x50>
 8005278:	2309      	movs	r3, #9
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	f04f 30ff 	mov.w	r0, #4294967295
 8005286:	e03e      	b.n	8005306 <__swsetup_r+0xba>
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <__swsetup_r+0xd4>)
 800528a:	429c      	cmp	r4, r3
 800528c:	d101      	bne.n	8005292 <__swsetup_r+0x46>
 800528e:	68ac      	ldr	r4, [r5, #8]
 8005290:	e7eb      	b.n	800526a <__swsetup_r+0x1e>
 8005292:	4b24      	ldr	r3, [pc, #144]	; (8005324 <__swsetup_r+0xd8>)
 8005294:	429c      	cmp	r4, r3
 8005296:	bf08      	it	eq
 8005298:	68ec      	ldreq	r4, [r5, #12]
 800529a:	e7e6      	b.n	800526a <__swsetup_r+0x1e>
 800529c:	0758      	lsls	r0, r3, #29
 800529e:	d512      	bpl.n	80052c6 <__swsetup_r+0x7a>
 80052a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052a2:	b141      	cbz	r1, 80052b6 <__swsetup_r+0x6a>
 80052a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052a8:	4299      	cmp	r1, r3
 80052aa:	d002      	beq.n	80052b2 <__swsetup_r+0x66>
 80052ac:	4630      	mov	r0, r6
 80052ae:	f000 f9b7 	bl	8005620 <_free_r>
 80052b2:	2300      	movs	r3, #0
 80052b4:	6363      	str	r3, [r4, #52]	; 0x34
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	2300      	movs	r3, #0
 80052c0:	6063      	str	r3, [r4, #4]
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f043 0308 	orr.w	r3, r3, #8
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	b94b      	cbnz	r3, 80052e6 <__swsetup_r+0x9a>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052dc:	d003      	beq.n	80052e6 <__swsetup_r+0x9a>
 80052de:	4621      	mov	r1, r4
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 f929 	bl	8005538 <__smakebuf_r>
 80052e6:	89a0      	ldrh	r0, [r4, #12]
 80052e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052ec:	f010 0301 	ands.w	r3, r0, #1
 80052f0:	d00a      	beq.n	8005308 <__swsetup_r+0xbc>
 80052f2:	2300      	movs	r3, #0
 80052f4:	60a3      	str	r3, [r4, #8]
 80052f6:	6963      	ldr	r3, [r4, #20]
 80052f8:	425b      	negs	r3, r3
 80052fa:	61a3      	str	r3, [r4, #24]
 80052fc:	6923      	ldr	r3, [r4, #16]
 80052fe:	b943      	cbnz	r3, 8005312 <__swsetup_r+0xc6>
 8005300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005304:	d1ba      	bne.n	800527c <__swsetup_r+0x30>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	0781      	lsls	r1, r0, #30
 800530a:	bf58      	it	pl
 800530c:	6963      	ldrpl	r3, [r4, #20]
 800530e:	60a3      	str	r3, [r4, #8]
 8005310:	e7f4      	b.n	80052fc <__swsetup_r+0xb0>
 8005312:	2000      	movs	r0, #0
 8005314:	e7f7      	b.n	8005306 <__swsetup_r+0xba>
 8005316:	bf00      	nop
 8005318:	20000014 	.word	0x20000014
 800531c:	0800595c 	.word	0x0800595c
 8005320:	0800597c 	.word	0x0800597c
 8005324:	0800593c 	.word	0x0800593c

08005328 <_close_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4d06      	ldr	r5, [pc, #24]	; (8005344 <_close_r+0x1c>)
 800532c:	2300      	movs	r3, #0
 800532e:	4604      	mov	r4, r0
 8005330:	4608      	mov	r0, r1
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	f7fb fe79 	bl	800102a <_close>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_close_r+0x1a>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_close_r+0x1a>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	200011a8 	.word	0x200011a8

08005348 <__sflush_r>:
 8005348:	898a      	ldrh	r2, [r1, #12]
 800534a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534e:	4605      	mov	r5, r0
 8005350:	0710      	lsls	r0, r2, #28
 8005352:	460c      	mov	r4, r1
 8005354:	d458      	bmi.n	8005408 <__sflush_r+0xc0>
 8005356:	684b      	ldr	r3, [r1, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	dc05      	bgt.n	8005368 <__sflush_r+0x20>
 800535c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	dc02      	bgt.n	8005368 <__sflush_r+0x20>
 8005362:	2000      	movs	r0, #0
 8005364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800536a:	2e00      	cmp	r6, #0
 800536c:	d0f9      	beq.n	8005362 <__sflush_r+0x1a>
 800536e:	2300      	movs	r3, #0
 8005370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005374:	682f      	ldr	r7, [r5, #0]
 8005376:	602b      	str	r3, [r5, #0]
 8005378:	d032      	beq.n	80053e0 <__sflush_r+0x98>
 800537a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	075a      	lsls	r2, r3, #29
 8005380:	d505      	bpl.n	800538e <__sflush_r+0x46>
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	1ac0      	subs	r0, r0, r3
 8005386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005388:	b10b      	cbz	r3, 800538e <__sflush_r+0x46>
 800538a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800538c:	1ac0      	subs	r0, r0, r3
 800538e:	2300      	movs	r3, #0
 8005390:	4602      	mov	r2, r0
 8005392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005394:	6a21      	ldr	r1, [r4, #32]
 8005396:	4628      	mov	r0, r5
 8005398:	47b0      	blx	r6
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	d106      	bne.n	80053ae <__sflush_r+0x66>
 80053a0:	6829      	ldr	r1, [r5, #0]
 80053a2:	291d      	cmp	r1, #29
 80053a4:	d82c      	bhi.n	8005400 <__sflush_r+0xb8>
 80053a6:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <__sflush_r+0x108>)
 80053a8:	40ca      	lsrs	r2, r1
 80053aa:	07d6      	lsls	r6, r2, #31
 80053ac:	d528      	bpl.n	8005400 <__sflush_r+0xb8>
 80053ae:	2200      	movs	r2, #0
 80053b0:	6062      	str	r2, [r4, #4]
 80053b2:	04d9      	lsls	r1, r3, #19
 80053b4:	6922      	ldr	r2, [r4, #16]
 80053b6:	6022      	str	r2, [r4, #0]
 80053b8:	d504      	bpl.n	80053c4 <__sflush_r+0x7c>
 80053ba:	1c42      	adds	r2, r0, #1
 80053bc:	d101      	bne.n	80053c2 <__sflush_r+0x7a>
 80053be:	682b      	ldr	r3, [r5, #0]
 80053c0:	b903      	cbnz	r3, 80053c4 <__sflush_r+0x7c>
 80053c2:	6560      	str	r0, [r4, #84]	; 0x54
 80053c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053c6:	602f      	str	r7, [r5, #0]
 80053c8:	2900      	cmp	r1, #0
 80053ca:	d0ca      	beq.n	8005362 <__sflush_r+0x1a>
 80053cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053d0:	4299      	cmp	r1, r3
 80053d2:	d002      	beq.n	80053da <__sflush_r+0x92>
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 f923 	bl	8005620 <_free_r>
 80053da:	2000      	movs	r0, #0
 80053dc:	6360      	str	r0, [r4, #52]	; 0x34
 80053de:	e7c1      	b.n	8005364 <__sflush_r+0x1c>
 80053e0:	6a21      	ldr	r1, [r4, #32]
 80053e2:	2301      	movs	r3, #1
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b0      	blx	r6
 80053e8:	1c41      	adds	r1, r0, #1
 80053ea:	d1c7      	bne.n	800537c <__sflush_r+0x34>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0c4      	beq.n	800537c <__sflush_r+0x34>
 80053f2:	2b1d      	cmp	r3, #29
 80053f4:	d001      	beq.n	80053fa <__sflush_r+0xb2>
 80053f6:	2b16      	cmp	r3, #22
 80053f8:	d101      	bne.n	80053fe <__sflush_r+0xb6>
 80053fa:	602f      	str	r7, [r5, #0]
 80053fc:	e7b1      	b.n	8005362 <__sflush_r+0x1a>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	e7ad      	b.n	8005364 <__sflush_r+0x1c>
 8005408:	690f      	ldr	r7, [r1, #16]
 800540a:	2f00      	cmp	r7, #0
 800540c:	d0a9      	beq.n	8005362 <__sflush_r+0x1a>
 800540e:	0793      	lsls	r3, r2, #30
 8005410:	680e      	ldr	r6, [r1, #0]
 8005412:	bf08      	it	eq
 8005414:	694b      	ldreq	r3, [r1, #20]
 8005416:	600f      	str	r7, [r1, #0]
 8005418:	bf18      	it	ne
 800541a:	2300      	movne	r3, #0
 800541c:	eba6 0807 	sub.w	r8, r6, r7
 8005420:	608b      	str	r3, [r1, #8]
 8005422:	f1b8 0f00 	cmp.w	r8, #0
 8005426:	dd9c      	ble.n	8005362 <__sflush_r+0x1a>
 8005428:	6a21      	ldr	r1, [r4, #32]
 800542a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800542c:	4643      	mov	r3, r8
 800542e:	463a      	mov	r2, r7
 8005430:	4628      	mov	r0, r5
 8005432:	47b0      	blx	r6
 8005434:	2800      	cmp	r0, #0
 8005436:	dc06      	bgt.n	8005446 <__sflush_r+0xfe>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	e78e      	b.n	8005364 <__sflush_r+0x1c>
 8005446:	4407      	add	r7, r0
 8005448:	eba8 0800 	sub.w	r8, r8, r0
 800544c:	e7e9      	b.n	8005422 <__sflush_r+0xda>
 800544e:	bf00      	nop
 8005450:	20400001 	.word	0x20400001

08005454 <_fflush_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	690b      	ldr	r3, [r1, #16]
 8005458:	4605      	mov	r5, r0
 800545a:	460c      	mov	r4, r1
 800545c:	b913      	cbnz	r3, 8005464 <_fflush_r+0x10>
 800545e:	2500      	movs	r5, #0
 8005460:	4628      	mov	r0, r5
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	b118      	cbz	r0, 800546e <_fflush_r+0x1a>
 8005466:	6983      	ldr	r3, [r0, #24]
 8005468:	b90b      	cbnz	r3, 800546e <_fflush_r+0x1a>
 800546a:	f7ff f8f3 	bl	8004654 <__sinit>
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <_fflush_r+0x6c>)
 8005470:	429c      	cmp	r4, r3
 8005472:	d11b      	bne.n	80054ac <_fflush_r+0x58>
 8005474:	686c      	ldr	r4, [r5, #4]
 8005476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0ef      	beq.n	800545e <_fflush_r+0xa>
 800547e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005480:	07d0      	lsls	r0, r2, #31
 8005482:	d404      	bmi.n	800548e <_fflush_r+0x3a>
 8005484:	0599      	lsls	r1, r3, #22
 8005486:	d402      	bmi.n	800548e <_fflush_r+0x3a>
 8005488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800548a:	f7ff f981 	bl	8004790 <__retarget_lock_acquire_recursive>
 800548e:	4628      	mov	r0, r5
 8005490:	4621      	mov	r1, r4
 8005492:	f7ff ff59 	bl	8005348 <__sflush_r>
 8005496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005498:	07da      	lsls	r2, r3, #31
 800549a:	4605      	mov	r5, r0
 800549c:	d4e0      	bmi.n	8005460 <_fflush_r+0xc>
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	059b      	lsls	r3, r3, #22
 80054a2:	d4dd      	bmi.n	8005460 <_fflush_r+0xc>
 80054a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a6:	f7ff f974 	bl	8004792 <__retarget_lock_release_recursive>
 80054aa:	e7d9      	b.n	8005460 <_fflush_r+0xc>
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <_fflush_r+0x70>)
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d101      	bne.n	80054b6 <_fflush_r+0x62>
 80054b2:	68ac      	ldr	r4, [r5, #8]
 80054b4:	e7df      	b.n	8005476 <_fflush_r+0x22>
 80054b6:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <_fflush_r+0x74>)
 80054b8:	429c      	cmp	r4, r3
 80054ba:	bf08      	it	eq
 80054bc:	68ec      	ldreq	r4, [r5, #12]
 80054be:	e7da      	b.n	8005476 <_fflush_r+0x22>
 80054c0:	0800595c 	.word	0x0800595c
 80054c4:	0800597c 	.word	0x0800597c
 80054c8:	0800593c 	.word	0x0800593c

080054cc <_lseek_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d07      	ldr	r5, [pc, #28]	; (80054ec <_lseek_r+0x20>)
 80054d0:	4604      	mov	r4, r0
 80054d2:	4608      	mov	r0, r1
 80054d4:	4611      	mov	r1, r2
 80054d6:	2200      	movs	r2, #0
 80054d8:	602a      	str	r2, [r5, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	f7fb fdcc 	bl	8001078 <_lseek>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_lseek_r+0x1e>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_lseek_r+0x1e>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	200011a8 	.word	0x200011a8

080054f0 <__swhatbuf_r>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	460e      	mov	r6, r1
 80054f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f8:	2900      	cmp	r1, #0
 80054fa:	b096      	sub	sp, #88	; 0x58
 80054fc:	4614      	mov	r4, r2
 80054fe:	461d      	mov	r5, r3
 8005500:	da07      	bge.n	8005512 <__swhatbuf_r+0x22>
 8005502:	2300      	movs	r3, #0
 8005504:	602b      	str	r3, [r5, #0]
 8005506:	89b3      	ldrh	r3, [r6, #12]
 8005508:	061a      	lsls	r2, r3, #24
 800550a:	d410      	bmi.n	800552e <__swhatbuf_r+0x3e>
 800550c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005510:	e00e      	b.n	8005530 <__swhatbuf_r+0x40>
 8005512:	466a      	mov	r2, sp
 8005514:	f000 f90c 	bl	8005730 <_fstat_r>
 8005518:	2800      	cmp	r0, #0
 800551a:	dbf2      	blt.n	8005502 <__swhatbuf_r+0x12>
 800551c:	9a01      	ldr	r2, [sp, #4]
 800551e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005522:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005526:	425a      	negs	r2, r3
 8005528:	415a      	adcs	r2, r3
 800552a:	602a      	str	r2, [r5, #0]
 800552c:	e7ee      	b.n	800550c <__swhatbuf_r+0x1c>
 800552e:	2340      	movs	r3, #64	; 0x40
 8005530:	2000      	movs	r0, #0
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	b016      	add	sp, #88	; 0x58
 8005536:	bd70      	pop	{r4, r5, r6, pc}

08005538 <__smakebuf_r>:
 8005538:	898b      	ldrh	r3, [r1, #12]
 800553a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800553c:	079d      	lsls	r5, r3, #30
 800553e:	4606      	mov	r6, r0
 8005540:	460c      	mov	r4, r1
 8005542:	d507      	bpl.n	8005554 <__smakebuf_r+0x1c>
 8005544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	2301      	movs	r3, #1
 800554e:	6163      	str	r3, [r4, #20]
 8005550:	b002      	add	sp, #8
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	ab01      	add	r3, sp, #4
 8005556:	466a      	mov	r2, sp
 8005558:	f7ff ffca 	bl	80054f0 <__swhatbuf_r>
 800555c:	9900      	ldr	r1, [sp, #0]
 800555e:	4605      	mov	r5, r0
 8005560:	4630      	mov	r0, r6
 8005562:	f7ff f917 	bl	8004794 <_malloc_r>
 8005566:	b948      	cbnz	r0, 800557c <__smakebuf_r+0x44>
 8005568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800556c:	059a      	lsls	r2, r3, #22
 800556e:	d4ef      	bmi.n	8005550 <__smakebuf_r+0x18>
 8005570:	f023 0303 	bic.w	r3, r3, #3
 8005574:	f043 0302 	orr.w	r3, r3, #2
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	e7e3      	b.n	8005544 <__smakebuf_r+0xc>
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <__smakebuf_r+0x7c>)
 800557e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	6020      	str	r0, [r4, #0]
 8005584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	9b00      	ldr	r3, [sp, #0]
 800558c:	6163      	str	r3, [r4, #20]
 800558e:	9b01      	ldr	r3, [sp, #4]
 8005590:	6120      	str	r0, [r4, #16]
 8005592:	b15b      	cbz	r3, 80055ac <__smakebuf_r+0x74>
 8005594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005598:	4630      	mov	r0, r6
 800559a:	f000 f8db 	bl	8005754 <_isatty_r>
 800559e:	b128      	cbz	r0, 80055ac <__smakebuf_r+0x74>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	89a0      	ldrh	r0, [r4, #12]
 80055ae:	4305      	orrs	r5, r0
 80055b0:	81a5      	strh	r5, [r4, #12]
 80055b2:	e7cd      	b.n	8005550 <__smakebuf_r+0x18>
 80055b4:	080045ed 	.word	0x080045ed

080055b8 <memcpy>:
 80055b8:	440a      	add	r2, r1
 80055ba:	4291      	cmp	r1, r2
 80055bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c0:	d100      	bne.n	80055c4 <memcpy+0xc>
 80055c2:	4770      	bx	lr
 80055c4:	b510      	push	{r4, lr}
 80055c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ce:	4291      	cmp	r1, r2
 80055d0:	d1f9      	bne.n	80055c6 <memcpy+0xe>
 80055d2:	bd10      	pop	{r4, pc}

080055d4 <memmove>:
 80055d4:	4288      	cmp	r0, r1
 80055d6:	b510      	push	{r4, lr}
 80055d8:	eb01 0402 	add.w	r4, r1, r2
 80055dc:	d902      	bls.n	80055e4 <memmove+0x10>
 80055de:	4284      	cmp	r4, r0
 80055e0:	4623      	mov	r3, r4
 80055e2:	d807      	bhi.n	80055f4 <memmove+0x20>
 80055e4:	1e43      	subs	r3, r0, #1
 80055e6:	42a1      	cmp	r1, r4
 80055e8:	d008      	beq.n	80055fc <memmove+0x28>
 80055ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055f2:	e7f8      	b.n	80055e6 <memmove+0x12>
 80055f4:	4402      	add	r2, r0
 80055f6:	4601      	mov	r1, r0
 80055f8:	428a      	cmp	r2, r1
 80055fa:	d100      	bne.n	80055fe <memmove+0x2a>
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005606:	e7f7      	b.n	80055f8 <memmove+0x24>

08005608 <__malloc_lock>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__malloc_lock+0x8>)
 800560a:	f7ff b8c1 	b.w	8004790 <__retarget_lock_acquire_recursive>
 800560e:	bf00      	nop
 8005610:	200011a0 	.word	0x200011a0

08005614 <__malloc_unlock>:
 8005614:	4801      	ldr	r0, [pc, #4]	; (800561c <__malloc_unlock+0x8>)
 8005616:	f7ff b8bc 	b.w	8004792 <__retarget_lock_release_recursive>
 800561a:	bf00      	nop
 800561c:	200011a0 	.word	0x200011a0

08005620 <_free_r>:
 8005620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005622:	2900      	cmp	r1, #0
 8005624:	d048      	beq.n	80056b8 <_free_r+0x98>
 8005626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562a:	9001      	str	r0, [sp, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f1a1 0404 	sub.w	r4, r1, #4
 8005632:	bfb8      	it	lt
 8005634:	18e4      	addlt	r4, r4, r3
 8005636:	f7ff ffe7 	bl	8005608 <__malloc_lock>
 800563a:	4a20      	ldr	r2, [pc, #128]	; (80056bc <_free_r+0x9c>)
 800563c:	9801      	ldr	r0, [sp, #4]
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	4615      	mov	r5, r2
 8005642:	b933      	cbnz	r3, 8005652 <_free_r+0x32>
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	6014      	str	r4, [r2, #0]
 8005648:	b003      	add	sp, #12
 800564a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800564e:	f7ff bfe1 	b.w	8005614 <__malloc_unlock>
 8005652:	42a3      	cmp	r3, r4
 8005654:	d90b      	bls.n	800566e <_free_r+0x4e>
 8005656:	6821      	ldr	r1, [r4, #0]
 8005658:	1862      	adds	r2, r4, r1
 800565a:	4293      	cmp	r3, r2
 800565c:	bf04      	itt	eq
 800565e:	681a      	ldreq	r2, [r3, #0]
 8005660:	685b      	ldreq	r3, [r3, #4]
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	bf04      	itt	eq
 8005666:	1852      	addeq	r2, r2, r1
 8005668:	6022      	streq	r2, [r4, #0]
 800566a:	602c      	str	r4, [r5, #0]
 800566c:	e7ec      	b.n	8005648 <_free_r+0x28>
 800566e:	461a      	mov	r2, r3
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	b10b      	cbz	r3, 8005678 <_free_r+0x58>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d9fa      	bls.n	800566e <_free_r+0x4e>
 8005678:	6811      	ldr	r1, [r2, #0]
 800567a:	1855      	adds	r5, r2, r1
 800567c:	42a5      	cmp	r5, r4
 800567e:	d10b      	bne.n	8005698 <_free_r+0x78>
 8005680:	6824      	ldr	r4, [r4, #0]
 8005682:	4421      	add	r1, r4
 8005684:	1854      	adds	r4, r2, r1
 8005686:	42a3      	cmp	r3, r4
 8005688:	6011      	str	r1, [r2, #0]
 800568a:	d1dd      	bne.n	8005648 <_free_r+0x28>
 800568c:	681c      	ldr	r4, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	6053      	str	r3, [r2, #4]
 8005692:	4421      	add	r1, r4
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	e7d7      	b.n	8005648 <_free_r+0x28>
 8005698:	d902      	bls.n	80056a0 <_free_r+0x80>
 800569a:	230c      	movs	r3, #12
 800569c:	6003      	str	r3, [r0, #0]
 800569e:	e7d3      	b.n	8005648 <_free_r+0x28>
 80056a0:	6825      	ldr	r5, [r4, #0]
 80056a2:	1961      	adds	r1, r4, r5
 80056a4:	428b      	cmp	r3, r1
 80056a6:	bf04      	itt	eq
 80056a8:	6819      	ldreq	r1, [r3, #0]
 80056aa:	685b      	ldreq	r3, [r3, #4]
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	bf04      	itt	eq
 80056b0:	1949      	addeq	r1, r1, r5
 80056b2:	6021      	streq	r1, [r4, #0]
 80056b4:	6054      	str	r4, [r2, #4]
 80056b6:	e7c7      	b.n	8005648 <_free_r+0x28>
 80056b8:	b003      	add	sp, #12
 80056ba:	bd30      	pop	{r4, r5, pc}
 80056bc:	2000009c 	.word	0x2000009c

080056c0 <_realloc_r>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	4607      	mov	r7, r0
 80056c4:	4614      	mov	r4, r2
 80056c6:	460e      	mov	r6, r1
 80056c8:	b921      	cbnz	r1, 80056d4 <_realloc_r+0x14>
 80056ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056ce:	4611      	mov	r1, r2
 80056d0:	f7ff b860 	b.w	8004794 <_malloc_r>
 80056d4:	b922      	cbnz	r2, 80056e0 <_realloc_r+0x20>
 80056d6:	f7ff ffa3 	bl	8005620 <_free_r>
 80056da:	4625      	mov	r5, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e0:	f000 f848 	bl	8005774 <_malloc_usable_size_r>
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d20f      	bcs.n	8005708 <_realloc_r+0x48>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4638      	mov	r0, r7
 80056ec:	f7ff f852 	bl	8004794 <_malloc_r>
 80056f0:	4605      	mov	r5, r0
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0f2      	beq.n	80056dc <_realloc_r+0x1c>
 80056f6:	4631      	mov	r1, r6
 80056f8:	4622      	mov	r2, r4
 80056fa:	f7ff ff5d 	bl	80055b8 <memcpy>
 80056fe:	4631      	mov	r1, r6
 8005700:	4638      	mov	r0, r7
 8005702:	f7ff ff8d 	bl	8005620 <_free_r>
 8005706:	e7e9      	b.n	80056dc <_realloc_r+0x1c>
 8005708:	4635      	mov	r5, r6
 800570a:	e7e7      	b.n	80056dc <_realloc_r+0x1c>

0800570c <_read_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d07      	ldr	r5, [pc, #28]	; (800572c <_read_r+0x20>)
 8005710:	4604      	mov	r4, r0
 8005712:	4608      	mov	r0, r1
 8005714:	4611      	mov	r1, r2
 8005716:	2200      	movs	r2, #0
 8005718:	602a      	str	r2, [r5, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	f7fb fc68 	bl	8000ff0 <_read>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_read_r+0x1e>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	b103      	cbz	r3, 800572a <_read_r+0x1e>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	200011a8 	.word	0x200011a8

08005730 <_fstat_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	; (8005750 <_fstat_r+0x20>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	f7fb fc80 	bl	8001042 <_fstat>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d102      	bne.n	800574c <_fstat_r+0x1c>
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	b103      	cbz	r3, 800574c <_fstat_r+0x1c>
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	bd38      	pop	{r3, r4, r5, pc}
 800574e:	bf00      	nop
 8005750:	200011a8 	.word	0x200011a8

08005754 <_isatty_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d06      	ldr	r5, [pc, #24]	; (8005770 <_isatty_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f7fb fc7f 	bl	8001062 <_isatty>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_isatty_r+0x1a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_isatty_r+0x1a>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	200011a8 	.word	0x200011a8

08005774 <_malloc_usable_size_r>:
 8005774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005778:	1f18      	subs	r0, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	bfbc      	itt	lt
 800577e:	580b      	ldrlt	r3, [r1, r0]
 8005780:	18c0      	addlt	r0, r0, r3
 8005782:	4770      	bx	lr

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
